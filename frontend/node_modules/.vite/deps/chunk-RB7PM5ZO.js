import {
  StyledEngineProvider,
  ThemeProvider_default,
  alpha,
  createBreakpoints,
  createColorScheme,
  createCssVarsProvider,
  createMixins,
  createMuiTheme,
  createSpacing,
  createTheme,
  createThemeWithVars,
  createTransitions,
  createTypography,
  css,
  darken,
  decomposeColor,
  deepmerge,
  defaultTheme_default,
  duration,
  easing,
  emphasize,
  excludeVariablesFromRoot_default,
  getContrastRatio,
  getLuminance,
  getOverlayAlpha,
  hexToRgb,
  hslToRgb,
  identifier_default,
  init_InitColorSchemeScript,
  init_createBreakpoints,
  init_createColorScheme,
  init_createMixins,
  init_createTheme,
  init_createThemeWithVars,
  init_createTransitions,
  init_createTypography,
  init_deepmerge,
  init_defaultTheme,
  init_esm2 as init_esm,
  init_excludeVariablesFromRoot,
  init_formatMuiErrorMessage,
  init_getOverlayAlpha,
  init_identifier,
  init_shouldSkipGeneratingVar,
  init_styleFunctionSx,
  init_styled,
  init_useTheme,
  init_useThemeProps,
  keyframes,
  lighten,
  recomposeColor,
  require_jsx_runtime,
  rgbToHex,
  shouldSkipGeneratingVar,
  styleFunctionSx_default,
  styled_default,
  useTheme,
  useThemeProps
} from "./chunk-2FHYP4ZO.js";
import {
  require_react
} from "./chunk-IA2PFXYO.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/@mui/material/styles/adaptV4Theme.js
function adaptV4Theme(inputTheme) {
  if (true) {
    console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join("\n"));
  }
  const {
    defaultProps = {},
    mixins = {},
    overrides = {},
    palette = {},
    props = {},
    styleOverrides = {},
    ...other
  } = inputTheme;
  const theme = {
    ...other,
    components: {}
  };
  Object.keys(defaultProps).forEach((component) => {
    const componentValue = theme.components[component] || {};
    componentValue.defaultProps = defaultProps[component];
    theme.components[component] = componentValue;
  });
  Object.keys(props).forEach((component) => {
    const componentValue = theme.components[component] || {};
    componentValue.defaultProps = props[component];
    theme.components[component] = componentValue;
  });
  Object.keys(styleOverrides).forEach((component) => {
    const componentValue = theme.components[component] || {};
    componentValue.styleOverrides = styleOverrides[component];
    theme.components[component] = componentValue;
  });
  Object.keys(overrides).forEach((component) => {
    const componentValue = theme.components[component] || {};
    componentValue.styleOverrides = overrides[component];
    theme.components[component] = componentValue;
  });
  theme.spacing = createSpacing(inputTheme.spacing);
  const breakpoints = createBreakpoints(inputTheme.breakpoints || {});
  const spacing = theme.spacing;
  theme.mixins = {
    gutters: (styles = {}) => {
      return {
        paddingLeft: spacing(2),
        paddingRight: spacing(2),
        ...styles,
        [breakpoints.up("sm")]: {
          paddingLeft: spacing(3),
          paddingRight: spacing(3),
          ...styles[breakpoints.up("sm")]
        }
      };
    },
    ...mixins
  };
  const {
    type: typeInput,
    mode: modeInput,
    ...paletteRest
  } = palette;
  const finalMode = modeInput || typeInput || "light";
  theme.palette = {
    // theme.palette.text.hint
    text: {
      hint: finalMode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)"
    },
    mode: finalMode,
    type: finalMode,
    ...paletteRest
  };
  return theme;
}
var init_adaptV4Theme = __esm({
  "node_modules/@mui/material/styles/adaptV4Theme.js"() {
    init_esm();
  }
});

// node_modules/@mui/system/esm/createBreakpoints/index.js
var init_createBreakpoints2 = __esm({
  "node_modules/@mui/system/esm/createBreakpoints/index.js"() {
    init_createBreakpoints();
  }
});

// node_modules/@mui/material/styles/createMuiStrictModeTheme.js
function createMuiStrictModeTheme(options, ...args) {
  return createTheme(deepmerge({
    unstable_strictMode: true
  }, options), ...args);
}
var init_createMuiStrictModeTheme = __esm({
  "node_modules/@mui/material/styles/createMuiStrictModeTheme.js"() {
    init_deepmerge();
    init_createTheme();
  }
});

// node_modules/@mui/material/styles/createStyles.js
function createStyles(styles) {
  if (!warnedOnce) {
    console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join("\n"));
    warnedOnce = true;
  }
  return styles;
}
var warnedOnce;
var init_createStyles = __esm({
  "node_modules/@mui/material/styles/createStyles.js"() {
    warnedOnce = false;
  }
});

// node_modules/@mui/material/styles/cssUtils.js
function isUnitless(value) {
  return String(parseFloat(value)).length === String(value).length;
}
function getUnit(input) {
  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
}
function toUnitless(length) {
  return parseFloat(length);
}
function convertLength(baseFontSize) {
  return (length, toUnit) => {
    const fromUnit = getUnit(length);
    if (fromUnit === toUnit) {
      return length;
    }
    let pxLength = toUnitless(length);
    if (fromUnit !== "px") {
      if (fromUnit === "em") {
        pxLength = toUnitless(length) * toUnitless(baseFontSize);
      } else if (fromUnit === "rem") {
        pxLength = toUnitless(length) * toUnitless(baseFontSize);
      }
    }
    let outputLength = pxLength;
    if (toUnit !== "px") {
      if (toUnit === "em") {
        outputLength = pxLength / toUnitless(baseFontSize);
      } else if (toUnit === "rem") {
        outputLength = pxLength / toUnitless(baseFontSize);
      } else {
        return length;
      }
    }
    return parseFloat(outputLength.toFixed(5)) + toUnit;
  };
}
function alignProperty({
  size,
  grid
}) {
  const sizeBelow = size - size % grid;
  const sizeAbove = sizeBelow + grid;
  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
}
function fontGrid({
  lineHeight,
  pixels,
  htmlFontSize
}) {
  return pixels / (lineHeight * htmlFontSize);
}
function responsiveProperty({
  cssProperty,
  min,
  max,
  unit = "rem",
  breakpoints = [600, 900, 1200],
  transform = null
}) {
  const output = {
    [cssProperty]: `${min}${unit}`
  };
  const factor = (max - min) / breakpoints[breakpoints.length - 1];
  breakpoints.forEach((breakpoint) => {
    let value = min + factor * breakpoint;
    if (transform !== null) {
      value = transform(value);
    }
    output[`@media (min-width:${breakpoint}px)`] = {
      [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`
    };
  });
  return output;
}
var init_cssUtils = __esm({
  "node_modules/@mui/material/styles/cssUtils.js"() {
  }
});

// node_modules/@mui/material/styles/responsiveFontSizes.js
function responsiveFontSizes(themeInput, options = {}) {
  const {
    breakpoints = ["sm", "md", "lg"],
    disableAlign = false,
    factor = 2,
    variants = ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"]
  } = options;
  const theme = {
    ...themeInput
  };
  theme.typography = {
    ...theme.typography
  };
  const typography = theme.typography;
  const convert = convertLength(typography.htmlFontSize);
  const breakpointValues = breakpoints.map((x) => theme.breakpoints.values[x]);
  variants.forEach((variant) => {
    const style = typography[variant];
    if (!style) {
      return;
    }
    const remFontSize = parseFloat(convert(style.fontSize, "rem"));
    if (remFontSize <= 1) {
      return;
    }
    const maxFontSize = remFontSize;
    const minFontSize = 1 + (maxFontSize - 1) / factor;
    let {
      lineHeight
    } = style;
    if (!isUnitless(lineHeight) && !disableAlign) {
      throw new Error(true ? "MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead." : formatMuiErrorMessage(6));
    }
    if (!isUnitless(lineHeight)) {
      lineHeight = parseFloat(convert(lineHeight, "rem")) / parseFloat(remFontSize);
    }
    let transform = null;
    if (!disableAlign) {
      transform = (value) => alignProperty({
        size: value,
        grid: fontGrid({
          pixels: 4,
          lineHeight,
          htmlFontSize: typography.htmlFontSize
        })
      });
    }
    typography[variant] = {
      ...style,
      ...responsiveProperty({
        cssProperty: "fontSize",
        min: minFontSize,
        max: maxFontSize,
        unit: "rem",
        breakpoints: breakpointValues,
        transform
      })
    };
  });
  return theme;
}
var init_responsiveFontSizes = __esm({
  "node_modules/@mui/material/styles/responsiveFontSizes.js"() {
    init_formatMuiErrorMessage();
    init_cssUtils();
  }
});

// node_modules/@mui/material/styles/useThemeProps.js
function useThemeProps2({
  props,
  name
}) {
  return useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme_default,
    themeId: identifier_default
  });
}
var init_useThemeProps2 = __esm({
  "node_modules/@mui/material/styles/useThemeProps.js"() {
    "use client";
    init_useThemeProps();
    init_defaultTheme();
    init_identifier();
  }
});

// node_modules/@mui/material/styles/ThemeProviderNoVars.js
function ThemeProviderNoVars({
  theme: themeInput,
  ...props
}) {
  const scopedTheme = identifier_default in themeInput ? themeInput[identifier_default] : void 0;
  return (0, import_jsx_runtime.jsx)(ThemeProvider_default, {
    ...props,
    themeId: scopedTheme ? identifier_default : void 0,
    theme: scopedTheme || themeInput
  });
}
var React, import_jsx_runtime;
var init_ThemeProviderNoVars = __esm({
  "node_modules/@mui/material/styles/ThemeProviderNoVars.js"() {
    "use client";
    React = __toESM(require_react());
    init_esm();
    init_identifier();
    import_jsx_runtime = __toESM(require_jsx_runtime());
  }
});

// node_modules/@mui/system/esm/InitColorSchemeScript/index.js
var init_InitColorSchemeScript2 = __esm({
  "node_modules/@mui/system/esm/InitColorSchemeScript/index.js"() {
    init_InitColorSchemeScript();
  }
});

// node_modules/@mui/material/InitColorSchemeScript/InitColorSchemeScript.js
var React2, import_jsx_runtime2, defaultConfig;
var init_InitColorSchemeScript3 = __esm({
  "node_modules/@mui/material/InitColorSchemeScript/InitColorSchemeScript.js"() {
    React2 = __toESM(require_react());
    init_InitColorSchemeScript2();
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    defaultConfig = {
      attribute: "data-mui-color-scheme",
      colorSchemeStorageKey: "mui-color-scheme",
      defaultLightColorScheme: "light",
      defaultDarkColorScheme: "dark",
      modeStorageKey: "mui-mode"
    };
  }
});

// node_modules/@mui/material/styles/ThemeProviderWithVars.js
function Experimental_CssVarsProvider(props) {
  if (true) {
    if (!warnedOnce2) {
      console.warn(["MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.", "", "You should use `import { ThemeProvider } from '@mui/material/styles'` instead.", "For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/"].join("\n"));
      warnedOnce2 = true;
    }
  }
  return (0, import_jsx_runtime3.jsx)(InternalCssVarsProvider, {
    ...props
  });
}
var React3, import_jsx_runtime3, InternalCssVarsProvider, useColorScheme, deprecatedGetInitColorSchemeScript, warnedOnce2, warnedInitScriptOnce, getInitColorSchemeScript, CssVarsProvider;
var init_ThemeProviderWithVars = __esm({
  "node_modules/@mui/material/styles/ThemeProviderWithVars.js"() {
    "use client";
    React3 = __toESM(require_react());
    init_styleFunctionSx();
    init_esm();
    init_createTheme();
    init_createTypography();
    init_identifier();
    init_InitColorSchemeScript3();
    import_jsx_runtime3 = __toESM(require_jsx_runtime());
    ({
      CssVarsProvider: InternalCssVarsProvider,
      useColorScheme,
      getInitColorSchemeScript: deprecatedGetInitColorSchemeScript
    } = createCssVarsProvider({
      themeId: identifier_default,
      // @ts-ignore ignore module augmentation tests
      theme: () => createTheme({
        cssVariables: true
      }),
      colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,
      modeStorageKey: defaultConfig.modeStorageKey,
      defaultColorScheme: {
        light: defaultConfig.defaultLightColorScheme,
        dark: defaultConfig.defaultDarkColorScheme
      },
      resolveTheme: (theme) => {
        const newTheme = {
          ...theme,
          typography: createTypography(theme.palette, theme.typography)
        };
        newTheme.unstable_sx = function sx(props) {
          return styleFunctionSx_default({
            sx: props,
            theme: this
          });
        };
        return newTheme;
      }
    }));
    warnedOnce2 = false;
    warnedInitScriptOnce = false;
    getInitColorSchemeScript = (params) => {
      if (!warnedInitScriptOnce) {
        console.warn(["MUI: The getInitColorSchemeScript function has been deprecated.", "", "You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`", "and replace the function call with `<InitColorSchemeScript />` instead."].join("\n"));
        warnedInitScriptOnce = true;
      }
      return deprecatedGetInitColorSchemeScript(params);
    };
    CssVarsProvider = InternalCssVarsProvider;
  }
});

// node_modules/@mui/material/styles/ThemeProvider.js
function ThemeProvider({
  theme,
  ...props
}) {
  if (typeof theme === "function") {
    return (0, import_jsx_runtime4.jsx)(ThemeProviderNoVars, {
      theme,
      ...props
    });
  }
  const muiTheme = identifier_default in theme ? theme[identifier_default] : theme;
  if (!("colorSchemes" in muiTheme)) {
    return (0, import_jsx_runtime4.jsx)(ThemeProviderNoVars, {
      theme,
      ...props
    });
  }
  return (0, import_jsx_runtime4.jsx)(CssVarsProvider, {
    theme,
    ...props
  });
}
var React4, import_jsx_runtime4;
var init_ThemeProvider = __esm({
  "node_modules/@mui/material/styles/ThemeProvider.js"() {
    "use client";
    React4 = __toESM(require_react());
    init_ThemeProviderNoVars();
    init_ThemeProviderWithVars();
    init_identifier();
    import_jsx_runtime4 = __toESM(require_jsx_runtime());
  }
});

// node_modules/@mui/material/styles/makeStyles.js
function makeStyles() {
  throw new Error(true ? "MUI: makeStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details." : formatMuiErrorMessage(14));
}
var init_makeStyles = __esm({
  "node_modules/@mui/material/styles/makeStyles.js"() {
    init_formatMuiErrorMessage();
  }
});

// node_modules/@mui/material/styles/withStyles.js
function withStyles() {
  throw new Error(true ? "MUI: withStyles is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details." : formatMuiErrorMessage(15));
}
var init_withStyles = __esm({
  "node_modules/@mui/material/styles/withStyles.js"() {
    init_formatMuiErrorMessage();
  }
});

// node_modules/@mui/material/styles/withTheme.js
function withTheme() {
  throw new Error(true ? "MUI: withTheme is no longer exported from @mui/material/styles.\nYou have to import it from @mui/styles.\nSee https://mui.com/r/migration-v4/#mui-material-styles for more details." : formatMuiErrorMessage(16));
}
var init_withTheme = __esm({
  "node_modules/@mui/material/styles/withTheme.js"() {
    init_formatMuiErrorMessage();
  }
});

// node_modules/@mui/material/styles/experimental_extendTheme.js
function deprecatedExtendTheme(...args) {
  if (!warnedOnce3) {
    console.warn(["MUI: The `experimental_extendTheme` has been stabilized.", "", "You should use `import { extendTheme } from '@mui/material/styles'`"].join("\n"));
    warnedOnce3 = true;
  }
  return createThemeWithVars(...args);
}
var warnedOnce3;
var init_experimental_extendTheme = __esm({
  "node_modules/@mui/material/styles/experimental_extendTheme.js"() {
    init_createThemeWithVars();
    warnedOnce3 = false;
  }
});

// node_modules/@mui/material/styles/index.js
var styles_exports = {};
__export(styles_exports, {
  CssVarsProvider: () => CssVarsProvider,
  Experimental_CssVarsProvider: () => Experimental_CssVarsProvider,
  StyledEngineProvider: () => StyledEngineProvider,
  THEME_ID: () => identifier_default,
  ThemeProvider: () => ThemeProvider,
  adaptV4Theme: () => adaptV4Theme,
  alpha: () => alpha,
  createColorScheme: () => createColorScheme,
  createMuiTheme: () => createMuiTheme,
  createStyles: () => createStyles,
  createTheme: () => createTheme,
  createTransitions: () => createTransitions,
  css: () => css,
  darken: () => darken,
  decomposeColor: () => decomposeColor,
  duration: () => duration,
  easing: () => easing,
  emphasize: () => emphasize,
  experimentalStyled: () => styled_default,
  experimental_extendTheme: () => deprecatedExtendTheme,
  experimental_sx: () => experimental_sx,
  extendTheme: () => createThemeWithVars,
  getContrastRatio: () => getContrastRatio,
  getInitColorSchemeScript: () => getInitColorSchemeScript,
  getLuminance: () => getLuminance,
  getOverlayAlpha: () => getOverlayAlpha,
  hexToRgb: () => hexToRgb,
  hslToRgb: () => hslToRgb,
  keyframes: () => keyframes,
  lighten: () => lighten,
  makeStyles: () => makeStyles,
  private_createMixins: () => createMixins,
  private_createTypography: () => createTypography,
  private_excludeVariablesFromRoot: () => excludeVariablesFromRoot_default,
  recomposeColor: () => recomposeColor,
  responsiveFontSizes: () => responsiveFontSizes,
  rgbToHex: () => rgbToHex,
  shouldSkipGeneratingVar: () => shouldSkipGeneratingVar,
  styled: () => styled_default,
  unstable_createBreakpoints: () => createBreakpoints,
  unstable_createMuiStrictModeTheme: () => createMuiStrictModeTheme,
  unstable_getUnit: () => getUnit,
  unstable_toUnitless: () => toUnitless,
  useColorScheme: () => useColorScheme,
  useTheme: () => useTheme,
  useThemeProps: () => useThemeProps2,
  withStyles: () => withStyles,
  withTheme: () => withTheme
});
function experimental_sx() {
  throw new Error(true ? "MUI: The `experimental_sx` has been moved to `theme.unstable_sx`.For more details, see https://github.com/mui/material-ui/pull/35150." : formatMuiErrorMessage(19));
}
var init_styles = __esm({
  "node_modules/@mui/material/styles/index.js"() {
    init_formatMuiErrorMessage();
    init_identifier();
    init_adaptV4Theme();
    init_esm();
    init_createBreakpoints2();
    init_createTheme();
    init_createMuiStrictModeTheme();
    init_createStyles();
    init_cssUtils();
    init_responsiveFontSizes();
    init_createTransitions();
    init_createColorScheme();
    init_useTheme();
    init_useThemeProps2();
    init_styled();
    init_styled();
    init_ThemeProvider();
    init_esm();
    init_makeStyles();
    init_withStyles();
    init_withTheme();
    init_ThemeProviderWithVars();
    init_createThemeWithVars();
    init_experimental_extendTheme();
    init_getOverlayAlpha();
    init_shouldSkipGeneratingVar();
    init_createTypography();
    init_createMixins();
    init_excludeVariablesFromRoot();
  }
});

export {
  adaptV4Theme,
  createMuiStrictModeTheme,
  createStyles,
  getUnit,
  toUnitless,
  responsiveFontSizes,
  useThemeProps2 as useThemeProps,
  init_useThemeProps2 as init_useThemeProps,
  useColorScheme,
  Experimental_CssVarsProvider,
  getInitColorSchemeScript,
  CssVarsProvider,
  ThemeProvider,
  makeStyles,
  withStyles,
  withTheme,
  deprecatedExtendTheme,
  experimental_sx,
  styles_exports,
  init_styles
};
//# sourceMappingURL=chunk-RB7PM5ZO.js.map
