import {
  ButtonBase_default,
  init_ButtonBase
} from "./chunk-TOSPLIJP.js";
import {
  Grow_default,
  InputBase_default,
  ListContext_default,
  Portal_default,
  Select_default,
  formControlState,
  init_FormControl,
  init_Grow,
  init_InputBase,
  init_ListContext,
  init_Portal,
  init_Select,
  init_formControlState,
  init_isHostComponent,
  init_useFormControl,
  isHostComponent_default,
  useFormControl
} from "./chunk-UBWMTGGT.js";
import {
  createSimplePaletteValueFilter,
  init_createSimplePaletteValueFilter
} from "./chunk-Q5JP5RE5.js";
import {
  init_requirePropFactory,
  init_unsupportedProp,
  init_useControlled,
  init_useEnhancedEffect,
  init_useId,
  requirePropFactory_default,
  unsupportedProp_default,
  useControlled_default,
  useEnhancedEffect_default as useEnhancedEffect_default2,
  useId_default
} from "./chunk-NCQBIOVL.js";
import {
  init_useEventCallback,
  init_useForkRef,
  useEventCallback_default,
  useForkRef_default
} from "./chunk-GLYUAQ7P.js";
import {
  init_useThemeProps,
  useThemeProps
} from "./chunk-TMLD5OQX.js";
import {
  init_useSlot,
  useSlot
} from "./chunk-KVHWT7IZ.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-4GTREFV4.js";
import {
  capitalize_default,
  init_DefaultPropsProvider,
  init_capitalize,
  init_memoTheme,
  init_zero_styled,
  internal_createExtendSxProp,
  memoTheme_default,
  useDefaultProps
} from "./chunk-KSJSN6LZ.js";
import {
  HTMLElementType,
  Timeout,
  alpha,
  appendOwnerState_default,
  chainPropTypes,
  composeClasses,
  darken,
  elementAcceptingRef_default,
  extendSxProp,
  generateUtilityClass,
  generateUtilityClasses,
  getReactElementRef,
  handleBreakpoints,
  init_HTMLElementType,
  init_RtlProvider,
  init_appendOwnerState,
  init_chainPropTypes,
  init_colorManipulator,
  init_composeClasses,
  init_elementAcceptingRef,
  init_esm,
  init_esm2,
  init_generateUtilityClass,
  init_generateUtilityClasses,
  init_getReactElementRef,
  init_integerPropType,
  init_isFocusVisible,
  init_refType,
  init_rootShouldForwardProp,
  init_styleFunctionSx,
  init_styled,
  init_useSlotProps,
  init_useTheme,
  init_useTimeout,
  integerPropType_default,
  isFocusVisible,
  lighten,
  ownerDocument,
  refType_default,
  require_jsx_runtime,
  resolveBreakpointValues,
  rootShouldForwardProp_default,
  styled_default,
  useEnhancedEffect_default,
  useForkRef,
  useRtl,
  useSlotProps_default,
  useTheme,
  useTimeout
} from "./chunk-E6FNK6FG.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-KWXT3HW3.js";
import {
  require_prop_types
} from "./chunk-QFATPNX4.js";
import {
  require_react
} from "./chunk-IA2PFXYO.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/@mui/material/IconButton/iconButtonClasses.js
function getIconButtonUtilityClass(slot) {
  return generateUtilityClass("MuiIconButton", slot);
}
var iconButtonClasses, iconButtonClasses_default;
var init_iconButtonClasses = __esm({
  "node_modules/@mui/material/IconButton/iconButtonClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
    iconButtonClasses_default = iconButtonClasses;
  }
});

// node_modules/@mui/material/IconButton/IconButton.js
var React, import_prop_types, import_jsx_runtime, useUtilityClasses, IconButtonRoot, IconButton, IconButton_default;
var init_IconButton = __esm({
  "node_modules/@mui/material/IconButton/IconButton.js"() {
    "use client";
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx();
    init_chainPropTypes();
    init_composeClasses();
    init_colorManipulator();
    init_zero_styled();
    init_memoTheme();
    init_createSimplePaletteValueFilter();
    init_DefaultPropsProvider();
    init_ButtonBase();
    init_capitalize();
    init_iconButtonClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        disabled,
        color,
        edge,
        size
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", color !== "default" && `color${capitalize_default(color)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`]
      };
      return composeClasses(slots, getIconButtonUtilityClass, classes);
    };
    IconButtonRoot = styled_default(ButtonBase_default, {
      name: "MuiIconButton",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.color !== "default" && styles[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize_default(ownerState.edge)}`], styles[`size${capitalize_default(ownerState.size)}`]];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      textAlign: "center",
      flex: "0 0 auto",
      fontSize: theme.typography.pxToRem(24),
      padding: 8,
      borderRadius: "50%",
      color: (theme.vars || theme).palette.action.active,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shortest
      }),
      variants: [{
        props: {
          disableRipple: false
        },
        style: {
          "&:hover": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        }
      }, {
        props: {
          edge: "start"
        },
        style: {
          marginLeft: -12
        }
      }, {
        props: {
          edge: "start",
          size: "small"
        },
        style: {
          marginLeft: -3
        }
      }, {
        props: {
          edge: "end"
        },
        style: {
          marginRight: -12
        }
      }, {
        props: {
          edge: "end",
          size: "small"
        },
        style: {
          marginRight: -3
        }
      }]
    })), memoTheme_default(({
      theme
    }) => ({
      variants: [{
        props: {
          color: "inherit"
        },
        style: {
          color: "inherit"
        }
      }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
        props: {
          color
        },
        style: {
          color: (theme.vars || theme).palette[color].main
        }
      })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
        props: {
          color,
          disableRipple: false
        },
        style: {
          "&:hover": {
            backgroundColor: theme.vars ? `rgba(${(theme.vars || theme).palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha((theme.vars || theme).palette[color].main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        }
      })), {
        props: {
          size: "small"
        },
        style: {
          padding: 5,
          fontSize: theme.typography.pxToRem(18)
        }
      }, {
        props: {
          size: "large"
        },
        style: {
          padding: 12,
          fontSize: theme.typography.pxToRem(28)
        }
      }],
      [`&.${iconButtonClasses_default.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    })));
    IconButton = React.forwardRef(function IconButton2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiIconButton"
      });
      const {
        edge = false,
        children,
        className,
        color = "default",
        disabled = false,
        disableFocusRipple = false,
        disableRipple = false,
        size = "medium",
        ...other
      } = props;
      const ownerState = {
        ...props,
        edge,
        color,
        disabled,
        disableFocusRipple,
        disableRipple,
        size
      };
      const classes = useUtilityClasses(ownerState);
      return (0, import_jsx_runtime.jsx)(IconButtonRoot, {
        className: clsx_default(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        disableRipple,
        ref,
        ...other,
        ownerState,
        children
      });
    });
    true ? IconButton.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The icon to display.
       */
      children: chainPropTypes(import_prop_types.default.node, (props) => {
        const found = React.Children.toArray(props.children).some((child) => React.isValidElement(child) && child.props.onClick);
        if (found) {
          return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
        }
        return null;
      }),
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'default'
       */
      color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types.default.string]),
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: import_prop_types.default.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: import_prop_types.default.bool,
      /**
       * If `true`, the ripple effect is disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
       * @default false
       */
      disableRipple: import_prop_types.default.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: import_prop_types.default.oneOf(["end", "start", false]),
      /**
       * The size of the component.
       * `small` is equivalent to the dense button styling.
       * @default 'medium'
       */
      size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["small", "medium", "large"]), import_prop_types.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object])
    } : void 0;
    IconButton_default = IconButton;
  }
});

// node_modules/@mui/material/IconButton/index.js
var IconButton_exports = {};
__export(IconButton_exports, {
  default: () => IconButton_default,
  getIconButtonUtilityClass: () => getIconButtonUtilityClass,
  iconButtonClasses: () => iconButtonClasses_default
});
var init_IconButton2 = __esm({
  "node_modules/@mui/material/IconButton/index.js"() {
    init_IconButton();
    init_iconButtonClasses();
    init_iconButtonClasses();
  }
});

// node_modules/@mui/material/Typography/typographyClasses.js
function getTypographyUtilityClass(slot) {
  return generateUtilityClass("MuiTypography", slot);
}
var typographyClasses, typographyClasses_default;
var init_typographyClasses = __esm({
  "node_modules/@mui/material/Typography/typographyClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
    typographyClasses_default = typographyClasses;
  }
});

// node_modules/@mui/material/Typography/Typography.js
var React2, import_prop_types2, import_jsx_runtime2, v6Colors, extendSxProp2, useUtilityClasses2, TypographyRoot, defaultVariantMapping, Typography, Typography_default;
var init_Typography = __esm({
  "node_modules/@mui/material/Typography/Typography.js"() {
    "use client";
    React2 = __toESM(require_react());
    import_prop_types2 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_capitalize();
    init_createSimplePaletteValueFilter();
    init_typographyClasses();
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    v6Colors = {
      primary: true,
      secondary: true,
      error: true,
      info: true,
      success: true,
      warning: true,
      textPrimary: true,
      textSecondary: true,
      textDisabled: true
    };
    extendSxProp2 = internal_createExtendSxProp();
    useUtilityClasses2 = (ownerState) => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
      };
      return composeClasses(slots, getTypographyUtilityClass, classes);
    };
    TypographyRoot = styled_default("span", {
      name: "MuiTypography",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== "inherit" && styles[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
      }
    })(memoTheme_default(({
      theme
    }) => {
      var _a;
      return {
        margin: 0,
        variants: [{
          props: {
            variant: "inherit"
          },
          style: {
            // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
            font: "inherit",
            lineHeight: "inherit",
            letterSpacing: "inherit"
          }
        }, ...Object.entries(theme.typography).filter(([variant, value]) => variant !== "inherit" && value && typeof value === "object").map(([variant, value]) => ({
          props: {
            variant
          },
          style: value
        })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
          props: {
            color
          },
          style: {
            color: (theme.vars || theme).palette[color].main
          }
        })), ...Object.entries(((_a = theme.palette) == null ? void 0 : _a.text) || {}).filter(([, value]) => typeof value === "string").map(([color]) => ({
          props: {
            color: `text${capitalize_default(color)}`
          },
          style: {
            color: (theme.vars || theme).palette.text[color]
          }
        })), {
          props: ({
            ownerState
          }) => ownerState.align !== "inherit",
          style: {
            textAlign: "var(--Typography-textAlign)"
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.noWrap,
          style: {
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap"
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.gutterBottom,
          style: {
            marginBottom: "0.35em"
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.paragraph,
          style: {
            marginBottom: 16
          }
        }]
      };
    }));
    defaultVariantMapping = {
      h1: "h1",
      h2: "h2",
      h3: "h3",
      h4: "h4",
      h5: "h5",
      h6: "h6",
      subtitle1: "h6",
      subtitle2: "h6",
      body1: "p",
      body2: "p",
      inherit: "p"
    };
    Typography = React2.forwardRef(function Typography2(inProps, ref) {
      const {
        color,
        ...themeProps
      } = useDefaultProps({
        props: inProps,
        name: "MuiTypography"
      });
      const isSxColor = !v6Colors[color];
      const props = extendSxProp2({
        ...themeProps,
        ...isSxColor && {
          color
        }
      });
      const {
        align = "inherit",
        className,
        component,
        gutterBottom = false,
        noWrap = false,
        paragraph = false,
        variant = "body1",
        variantMapping = defaultVariantMapping,
        ...other
      } = props;
      const ownerState = {
        ...props,
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      };
      const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
      const classes = useUtilityClasses2(ownerState);
      return (0, import_jsx_runtime2.jsx)(TypographyRoot, {
        as: Component,
        ref,
        className: clsx_default(classes.root, className),
        ...other,
        ownerState,
        style: {
          ...align !== "inherit" && {
            "--Typography-textAlign": align
          },
          ...other.style
        }
      });
    });
    true ? Typography.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Set the text-align on the component.
       * @default 'inherit'
       */
      align: import_prop_types2.default.oneOf(["center", "inherit", "justify", "left", "right"]),
      /**
       * The content of the component.
       */
      children: import_prop_types2.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types2.default.object,
      /**
       * @ignore
       */
      className: import_prop_types2.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       */
      color: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), import_prop_types2.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types2.default.elementType,
      /**
       * If `true`, the text will have a bottom margin.
       * @default false
       */
      gutterBottom: import_prop_types2.default.bool,
      /**
       * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
       *
       * Note that text overflow can only happen with block or inline-block level elements
       * (the element needs to have a width in order to overflow).
       * @default false
       */
      noWrap: import_prop_types2.default.bool,
      /**
       * If `true`, the element will be a paragraph element.
       * @default false
       * @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      paragraph: import_prop_types2.default.bool,
      /**
       * @ignore
       */
      style: import_prop_types2.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
      /**
       * Applies the theme typography styles.
       * @default 'body1'
       */
      variant: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types2.default.string]),
      /**
       * The component maps the variant prop to a range of different HTML element types.
       * For instance, subtitle1 to `<h6>`.
       * If you wish to change that mapping, you can provide your own.
       * Alternatively, you can use the `component` prop.
       * @default {
       *   h1: 'h1',
       *   h2: 'h2',
       *   h3: 'h3',
       *   h4: 'h4',
       *   h5: 'h5',
       *   h6: 'h6',
       *   subtitle1: 'h6',
       *   subtitle2: 'h6',
       *   body1: 'p',
       *   body2: 'p',
       *   inherit: 'p',
       * }
       */
      variantMapping: import_prop_types2.default.object
    } : void 0;
    Typography_default = Typography;
  }
});

// node_modules/@mui/material/Typography/index.js
var Typography_exports = {};
__export(Typography_exports, {
  default: () => Typography_default,
  getTypographyUtilityClass: () => getTypographyUtilityClass,
  typographyClasses: () => typographyClasses_default
});
var init_Typography2 = __esm({
  "node_modules/@mui/material/Typography/index.js"() {
    init_Typography();
    init_typographyClasses();
    init_typographyClasses();
  }
});

// node_modules/@mui/material/Popper/popperClasses.js
function getPopperUtilityClass(slot) {
  return generateUtilityClass("MuiPopper", slot);
}
var popperClasses;
var init_popperClasses = __esm({
  "node_modules/@mui/material/Popper/popperClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    popperClasses = generateUtilityClasses("MuiPopper", ["root"]);
  }
});

// node_modules/@popperjs/core/lib/enums.js
var top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases;
var init_enums = __esm({
  "node_modules/@popperjs/core/lib/enums.js"() {
    top = "top";
    bottom = "bottom";
    right = "right";
    left = "left";
    auto = "auto";
    basePlacements = [top, bottom, right, left];
    start = "start";
    end = "end";
    clippingParents = "clippingParents";
    viewport = "viewport";
    popper = "popper";
    reference = "reference";
    variationPlacements = basePlacements.reduce(function(acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []);
    beforeRead = "beforeRead";
    read = "read";
    afterRead = "afterRead";
    beforeMain = "beforeMain";
    main = "main";
    afterMain = "afterMain";
    beforeWrite = "beforeWrite";
    write = "write";
    afterWrite = "afterWrite";
    modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
var init_getNodeName = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"() {
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument2 = node.ownerDocument;
    return ownerDocument2 ? ownerDocument2.defaultView || window : window;
  }
  return node;
}
var init_getWindow = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getWindow.js"() {
  }
});

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
var init_instanceOf = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"() {
    init_getWindow();
  }
});

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default;
var init_applyStyles = __esm({
  "node_modules/@popperjs/core/lib/modifiers/applyStyles.js"() {
    init_getNodeName();
    init_instanceOf();
    applyStyles_default = {
      name: "applyStyles",
      enabled: true,
      phase: "write",
      fn: applyStyles,
      effect,
      requires: ["computeStyles"]
    };
  }
});

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var init_getBasePlacement = __esm({
  "node_modules/@popperjs/core/lib/utils/getBasePlacement.js"() {
    init_enums();
  }
});

// node_modules/@popperjs/core/lib/utils/math.js
var max, min, round;
var init_math = __esm({
  "node_modules/@popperjs/core/lib/utils/math.js"() {
    max = Math.max;
    min = Math.min;
    round = Math.round;
  }
});

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}
var init_userAgent = __esm({
  "node_modules/@popperjs/core/lib/utils/userAgent.js"() {
  }
});

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
var init_isLayoutViewport = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js"() {
    init_userAgent();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}
var init_getBoundingClientRect = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"() {
    init_instanceOf();
    init_math();
    init_getWindow();
    init_isLayoutViewport();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}
var init_getLayoutRect = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"() {
    init_getBoundingClientRect();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
var init_contains = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/contains.js"() {
    init_instanceOf();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
var init_getComputedStyle = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"() {
    init_getWindow();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}
var init_isTableElement = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/isTableElement.js"() {
    init_getNodeName();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}
var init_getDocumentElement = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"() {
    init_instanceOf();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}
var init_getParentNode = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"() {
    init_getNodeName();
    init_getDocumentElement();
    init_instanceOf();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
var init_getOffsetParent = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"() {
    init_getWindow();
    init_getNodeName();
    init_getComputedStyle();
    init_instanceOf();
    init_isTableElement();
    init_getParentNode();
    init_userAgent();
  }
});

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
var init_getMainAxisFromPlacement = __esm({
  "node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"() {
  }
});

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}
var init_within = __esm({
  "node_modules/@popperjs/core/lib/utils/within.js"() {
    init_math();
  }
});

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
var init_getFreshSideObject = __esm({
  "node_modules/@popperjs/core/lib/utils/getFreshSideObject.js"() {
  }
});

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
var init_mergePaddingObject = __esm({
  "node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"() {
    init_getFreshSideObject();
  }
});

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var init_expandToHashMap = __esm({
  "node_modules/@popperjs/core/lib/utils/expandToHashMap.js"() {
  }
});

// node_modules/@popperjs/core/lib/modifiers/arrow.js
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var toPaddingObject, arrow_default;
var init_arrow = __esm({
  "node_modules/@popperjs/core/lib/modifiers/arrow.js"() {
    init_getBasePlacement();
    init_getLayoutRect();
    init_contains();
    init_getOffsetParent();
    init_getMainAxisFromPlacement();
    init_within();
    init_mergePaddingObject();
    init_expandToHashMap();
    init_enums();
    toPaddingObject = function toPaddingObject2(padding, state) {
      padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    };
    arrow_default = {
      name: "arrow",
      enabled: true,
      phase: "main",
      fn: arrow,
      effect: effect2,
      requires: ["popperOffsets"],
      requiresIfExists: ["preventOverflow"]
    };
  }
});

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}
var init_getVariation = __esm({
  "node_modules/@popperjs/core/lib/utils/getVariation.js"() {
  }
});

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var unsetSides, computeStyles_default;
var init_computeStyles = __esm({
  "node_modules/@popperjs/core/lib/modifiers/computeStyles.js"() {
    init_enums();
    init_getOffsetParent();
    init_getWindow();
    init_getDocumentElement();
    init_getComputedStyle();
    init_getBasePlacement();
    init_getVariation();
    init_math();
    unsetSides = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
    computeStyles_default = {
      name: "computeStyles",
      enabled: true,
      phase: "beforeWrite",
      fn: computeStyles,
      data: {}
    };
  }
});

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var passive, eventListeners_default;
var init_eventListeners = __esm({
  "node_modules/@popperjs/core/lib/modifiers/eventListeners.js"() {
    init_getWindow();
    passive = {
      passive: true
    };
    eventListeners_default = {
      name: "eventListeners",
      enabled: true,
      phase: "write",
      fn: function fn() {
      },
      effect: effect3,
      data: {}
    };
  }
});

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}
var hash;
var init_getOppositePlacement = __esm({
  "node_modules/@popperjs/core/lib/utils/getOppositePlacement.js"() {
    hash = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
  }
});

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}
var hash2;
var init_getOppositeVariationPlacement = __esm({
  "node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js"() {
    hash2 = {
      start: "end",
      end: "start"
    };
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
var init_getWindowScroll = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"() {
    init_getWindow();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
var init_getWindowScrollBarX = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"() {
    init_getBoundingClientRect();
    init_getDocumentElement();
    init_getWindowScroll();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}
var init_getViewportRect = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js"() {
    init_getWindow();
    init_getDocumentElement();
    init_getWindowScrollBarX();
    init_isLayoutViewport();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
var init_getDocumentRect = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js"() {
    init_getDocumentElement();
    init_getComputedStyle();
    init_getWindowScrollBarX();
    init_getWindowScroll();
    init_math();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
var init_isScrollParent = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"() {
    init_getComputedStyle();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
var init_getScrollParent = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js"() {
    init_getParentNode();
    init_isScrollParent();
    init_getNodeName();
    init_instanceOf();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}
var init_listScrollParents = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"() {
    init_getScrollParent();
    init_getParentNode();
    init_getWindow();
    init_isScrollParent();
  }
});

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
var init_rectToClientRect = __esm({
  "node_modules/@popperjs/core/lib/utils/rectToClientRect.js"() {
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
var init_getClippingRect = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"() {
    init_enums();
    init_getViewportRect();
    init_getDocumentRect();
    init_listScrollParents();
    init_getOffsetParent();
    init_getDocumentElement();
    init_getComputedStyle();
    init_instanceOf();
    init_getBoundingClientRect();
    init_getParentNode();
    init_contains();
    init_getNodeName();
    init_rectToClientRect();
    init_math();
  }
});

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}
var init_computeOffsets = __esm({
  "node_modules/@popperjs/core/lib/utils/computeOffsets.js"() {
    init_getBasePlacement();
    init_getVariation();
    init_getMainAxisFromPlacement();
    init_enums();
  }
});

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
var init_detectOverflow = __esm({
  "node_modules/@popperjs/core/lib/utils/detectOverflow.js"() {
    init_getClippingRect();
    init_getDocumentElement();
    init_getBoundingClientRect();
    init_computeOffsets();
    init_rectToClientRect();
    init_enums();
    init_instanceOf();
    init_mergePaddingObject();
    init_expandToHashMap();
  }
});

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}
var init_computeAutoPlacement = __esm({
  "node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"() {
    init_getVariation();
    init_enums();
    init_detectOverflow();
    init_getBasePlacement();
  }
});

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default;
var init_flip = __esm({
  "node_modules/@popperjs/core/lib/modifiers/flip.js"() {
    init_getOppositePlacement();
    init_getBasePlacement();
    init_getOppositeVariationPlacement();
    init_detectOverflow();
    init_computeAutoPlacement();
    init_enums();
    init_getVariation();
    flip_default = {
      name: "flip",
      enabled: true,
      phase: "main",
      fn: flip,
      requiresIfExists: ["offset"],
      data: {
        _skip: false
      }
    };
  }
});

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default;
var init_hide = __esm({
  "node_modules/@popperjs/core/lib/modifiers/hide.js"() {
    init_enums();
    init_detectOverflow();
    hide_default = {
      name: "hide",
      enabled: true,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: hide
    };
  }
});

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default;
var init_offset = __esm({
  "node_modules/@popperjs/core/lib/modifiers/offset.js"() {
    init_getBasePlacement();
    init_enums();
    offset_default = {
      name: "offset",
      enabled: true,
      phase: "main",
      requires: ["popperOffsets"],
      fn: offset
    };
  }
});

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default;
var init_popperOffsets = __esm({
  "node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"() {
    init_computeOffsets();
    popperOffsets_default = {
      name: "popperOffsets",
      enabled: true,
      phase: "read",
      fn: popperOffsets,
      data: {}
    };
  }
});

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
var init_getAltAxis = __esm({
  "node_modules/@popperjs/core/lib/utils/getAltAxis.js"() {
  }
});

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default;
var init_preventOverflow = __esm({
  "node_modules/@popperjs/core/lib/modifiers/preventOverflow.js"() {
    init_enums();
    init_getBasePlacement();
    init_getMainAxisFromPlacement();
    init_getAltAxis();
    init_within();
    init_getLayoutRect();
    init_getOffsetParent();
    init_detectOverflow();
    init_getVariation();
    init_getFreshSideObject();
    init_math();
    preventOverflow_default = {
      name: "preventOverflow",
      enabled: true,
      phase: "main",
      fn: preventOverflow,
      requiresIfExists: ["offset"]
    };
  }
});

// node_modules/@popperjs/core/lib/modifiers/index.js
var init_modifiers = __esm({
  "node_modules/@popperjs/core/lib/modifiers/index.js"() {
    init_applyStyles();
    init_arrow();
    init_computeStyles();
    init_eventListeners();
    init_flip();
    init_hide();
    init_offset();
    init_popperOffsets();
    init_preventOverflow();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
var init_getHTMLElementScroll = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js"() {
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
var init_getNodeScroll = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js"() {
    init_getWindowScroll();
    init_getWindow();
    init_instanceOf();
    init_getHTMLElementScroll();
  }
});

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
var init_getCompositeRect = __esm({
  "node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"() {
    init_getBoundingClientRect();
    init_getNodeScroll();
    init_getNodeName();
    init_instanceOf();
    init_getWindowScrollBarX();
    init_getDocumentElement();
    init_isScrollParent();
    init_math();
  }
});

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
var init_orderModifiers = __esm({
  "node_modules/@popperjs/core/lib/utils/orderModifiers.js"() {
    init_enums();
  }
});

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}
var init_debounce = __esm({
  "node_modules/@popperjs/core/lib/utils/debounce.js"() {
  }
});

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var init_mergeByName = __esm({
  "node_modules/@popperjs/core/lib/utils/mergeByName.js"() {
  }
});

// node_modules/@popperjs/core/lib/createPopper.js
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var DEFAULT_OPTIONS, createPopper;
var init_createPopper = __esm({
  "node_modules/@popperjs/core/lib/createPopper.js"() {
    init_getCompositeRect();
    init_getLayoutRect();
    init_listScrollParents();
    init_getOffsetParent();
    init_orderModifiers();
    init_debounce();
    init_mergeByName();
    init_detectOverflow();
    init_instanceOf();
    DEFAULT_OPTIONS = {
      placement: "bottom",
      modifiers: [],
      strategy: "absolute"
    };
    createPopper = popperGenerator();
  }
});

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers, createPopper2;
var init_popper_lite = __esm({
  "node_modules/@popperjs/core/lib/popper-lite.js"() {
    init_createPopper();
    init_eventListeners();
    init_popperOffsets();
    init_computeStyles();
    init_applyStyles();
    defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
    createPopper2 = popperGenerator({
      defaultModifiers
    });
  }
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2, createPopper3;
var init_popper = __esm({
  "node_modules/@popperjs/core/lib/popper.js"() {
    init_createPopper();
    init_eventListeners();
    init_popperOffsets();
    init_computeStyles();
    init_applyStyles();
    init_offset();
    init_flip();
    init_preventOverflow();
    init_arrow();
    init_hide();
    init_popper_lite();
    init_modifiers();
    defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
    createPopper3 = popperGenerator({
      defaultModifiers: defaultModifiers2
    });
  }
});

// node_modules/@popperjs/core/lib/index.js
var init_lib = __esm({
  "node_modules/@popperjs/core/lib/index.js"() {
    init_enums();
    init_modifiers();
    init_createPopper();
    init_popper();
    init_popper_lite();
  }
});

// node_modules/@mui/material/Popper/BasePopper.js
function flipPlacement(placement, direction) {
  if (direction === "ltr") {
    return placement;
  }
  switch (placement) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return placement;
  }
}
function resolveAnchorEl(anchorEl) {
  return typeof anchorEl === "function" ? anchorEl() : anchorEl;
}
function isHTMLElement2(element) {
  return element.nodeType !== void 0;
}
function isVirtualElement(element) {
  return !isHTMLElement2(element);
}
var React3, import_prop_types3, import_jsx_runtime3, useUtilityClasses3, defaultPopperOptions, PopperTooltip, Popper, BasePopper_default;
var init_BasePopper = __esm({
  "node_modules/@mui/material/Popper/BasePopper.js"() {
    "use client";
    React3 = __toESM(require_react());
    init_esm();
    init_lib();
    import_prop_types3 = __toESM(require_prop_types());
    init_composeClasses();
    init_useSlotProps();
    init_Portal();
    init_popperClasses();
    import_jsx_runtime3 = __toESM(require_jsx_runtime());
    useUtilityClasses3 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getPopperUtilityClass, classes);
    };
    defaultPopperOptions = {};
    PopperTooltip = React3.forwardRef(function PopperTooltip2(props, forwardedRef) {
      const {
        anchorEl,
        children,
        direction,
        disablePortal,
        modifiers,
        open,
        placement: initialPlacement,
        popperOptions,
        popperRef: popperRefProp,
        slotProps = {},
        slots = {},
        TransitionProps,
        // @ts-ignore internal logic
        ownerState: ownerStateProp,
        // prevent from spreading to DOM, it can come from the parent component e.g. Select.
        ...other
      } = props;
      const tooltipRef = React3.useRef(null);
      const ownRef = useForkRef(tooltipRef, forwardedRef);
      const popperRef = React3.useRef(null);
      const handlePopperRef = useForkRef(popperRef, popperRefProp);
      const handlePopperRefRef = React3.useRef(handlePopperRef);
      useEnhancedEffect_default(() => {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      React3.useImperativeHandle(popperRefProp, () => popperRef.current, []);
      const rtlPlacement = flipPlacement(initialPlacement, direction);
      const [placement, setPlacement] = React3.useState(rtlPlacement);
      const [resolvedAnchorElement, setResolvedAnchorElement] = React3.useState(resolveAnchorEl(anchorEl));
      React3.useEffect(() => {
        if (popperRef.current) {
          popperRef.current.forceUpdate();
        }
      });
      React3.useEffect(() => {
        if (anchorEl) {
          setResolvedAnchorElement(resolveAnchorEl(anchorEl));
        }
      }, [anchorEl]);
      useEnhancedEffect_default(() => {
        if (!resolvedAnchorElement || !open) {
          return void 0;
        }
        const handlePopperUpdate = (data) => {
          setPlacement(data.placement);
        };
        if (true) {
          if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
            const box = resolvedAnchorElement.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          }
        }
        let popperModifiers = [{
          name: "preventOverflow",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "flip",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "onUpdate",
          enabled: true,
          phase: "afterWrite",
          fn: ({
            state
          }) => {
            handlePopperUpdate(state);
          }
        }];
        if (modifiers != null) {
          popperModifiers = popperModifiers.concat(modifiers);
        }
        if (popperOptions && popperOptions.modifiers != null) {
          popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        }
        const popper2 = createPopper3(resolvedAnchorElement, tooltipRef.current, {
          placement: rtlPlacement,
          ...popperOptions,
          modifiers: popperModifiers
        });
        handlePopperRefRef.current(popper2);
        return () => {
          popper2.destroy();
          handlePopperRefRef.current(null);
        };
      }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
      const childProps = {
        placement
      };
      if (TransitionProps !== null) {
        childProps.TransitionProps = TransitionProps;
      }
      const classes = useUtilityClasses3(props);
      const Root = slots.root ?? "div";
      const rootProps = useSlotProps_default({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          role: "tooltip",
          ref: ownRef
        },
        ownerState: props,
        className: classes.root
      });
      return (0, import_jsx_runtime3.jsx)(Root, {
        ...rootProps,
        children: typeof children === "function" ? children(childProps) : children
      });
    });
    Popper = React3.forwardRef(function Popper2(props, forwardedRef) {
      const {
        anchorEl,
        children,
        container: containerProp,
        direction = "ltr",
        disablePortal = false,
        keepMounted = false,
        modifiers,
        open,
        placement = "bottom",
        popperOptions = defaultPopperOptions,
        popperRef,
        style,
        transition = false,
        slotProps = {},
        slots = {},
        ...other
      } = props;
      const [exited, setExited] = React3.useState(true);
      const handleEnter = () => {
        setExited(false);
      };
      const handleExited = () => {
        setExited(true);
      };
      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }
      let container;
      if (containerProp) {
        container = containerProp;
      } else if (anchorEl) {
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);
        container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
      }
      const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
      const transitionProps = transition ? {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      } : void 0;
      return (0, import_jsx_runtime3.jsx)(Portal_default, {
        disablePortal,
        container,
        children: (0, import_jsx_runtime3.jsx)(PopperTooltip, {
          anchorEl,
          direction,
          disablePortal,
          modifiers,
          ref: forwardedRef,
          open: transition ? !exited : open,
          placement,
          popperOptions,
          popperRef,
          slotProps,
          slots,
          ...other,
          style: {
            // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
            position: "fixed",
            // Fix Popper.js display issue
            top: 0,
            left: 0,
            display,
            ...style
          },
          TransitionProps: transitionProps,
          children
        })
      });
    });
    true ? Popper.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: chainPropTypes(import_prop_types3.default.oneOfType([HTMLElementType, import_prop_types3.default.object, import_prop_types3.default.func]), (props) => {
        if (props.open) {
          const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
          if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
          }
        }
        return null;
      }),
      /**
       * Popper render function or node.
       */
      children: import_prop_types3.default.oneOfType([import_prop_types3.default.node, import_prop_types3.default.func]),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * You can also provide a callback, which is called in a React layout effect.
       * This lets you set the container from a ref, and also makes server-side rendering possible.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: import_prop_types3.default.oneOfType([HTMLElementType, import_prop_types3.default.func]),
      /**
       * Direction of the text.
       * @default 'ltr'
       */
      direction: import_prop_types3.default.oneOf(["ltr", "rtl"]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: import_prop_types3.default.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       * @default false
       */
      keepMounted: import_prop_types3.default.bool,
      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
       */
      modifiers: import_prop_types3.default.arrayOf(import_prop_types3.default.shape({
        data: import_prop_types3.default.object,
        effect: import_prop_types3.default.func,
        enabled: import_prop_types3.default.bool,
        fn: import_prop_types3.default.func,
        name: import_prop_types3.default.any,
        options: import_prop_types3.default.object,
        phase: import_prop_types3.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
        requires: import_prop_types3.default.arrayOf(import_prop_types3.default.string),
        requiresIfExists: import_prop_types3.default.arrayOf(import_prop_types3.default.string)
      })),
      /**
       * If `true`, the component is shown.
       */
      open: import_prop_types3.default.bool.isRequired,
      /**
       * Popper placement.
       * @default 'bottom'
       */
      placement: import_prop_types3.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      /**
       * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
       * @default {}
       */
      popperOptions: import_prop_types3.default.shape({
        modifiers: import_prop_types3.default.array,
        onFirstUpdate: import_prop_types3.default.func,
        placement: import_prop_types3.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        strategy: import_prop_types3.default.oneOf(["absolute", "fixed"])
      }),
      /**
       * A ref that points to the used popper instance.
       */
      popperRef: refType_default,
      /**
       * The props used for each slot inside the Popper.
       * @default {}
       */
      slotProps: import_prop_types3.default.shape({
        root: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
      }),
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: import_prop_types3.default.shape({
        root: import_prop_types3.default.elementType
      }),
      /**
       * Help supporting a react-transition-group/Transition component.
       * @default false
       */
      transition: import_prop_types3.default.bool
    } : void 0;
    BasePopper_default = Popper;
  }
});

// node_modules/@mui/material/Popper/Popper.js
var import_prop_types4, React4, import_jsx_runtime4, PopperRoot, Popper3, Popper_default;
var init_Popper = __esm({
  "node_modules/@mui/material/Popper/Popper.js"() {
    "use client";
    init_RtlProvider();
    init_refType();
    init_HTMLElementType();
    import_prop_types4 = __toESM(require_prop_types());
    React4 = __toESM(require_react());
    init_BasePopper();
    init_zero_styled();
    init_DefaultPropsProvider();
    import_jsx_runtime4 = __toESM(require_jsx_runtime());
    PopperRoot = styled_default(BasePopper_default, {
      name: "MuiPopper",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({});
    Popper3 = React4.forwardRef(function Popper4(inProps, ref) {
      const isRtl = useRtl();
      const props = useDefaultProps({
        props: inProps,
        name: "MuiPopper"
      });
      const {
        anchorEl,
        component,
        components,
        componentsProps,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition,
        slots,
        slotProps,
        ...other
      } = props;
      const RootComponent = (slots == null ? void 0 : slots.root) ?? (components == null ? void 0 : components.Root);
      const otherProps = {
        anchorEl,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition,
        ...other
      };
      return (0, import_jsx_runtime4.jsx)(PopperRoot, {
        as: component,
        direction: isRtl ? "rtl" : "ltr",
        slots: {
          root: RootComponent
        },
        slotProps: slotProps ?? componentsProps,
        ...otherProps,
        ref
      });
    });
    true ? Popper3.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: import_prop_types4.default.oneOfType([HTMLElementType, import_prop_types4.default.object, import_prop_types4.default.func]),
      /**
       * Popper render function or node.
       */
      children: import_prop_types4.default.oneOfType([import_prop_types4.default.node, import_prop_types4.default.func]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types4.default.elementType,
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       *
       * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
       * @default {}
       */
      components: import_prop_types4.default.shape({
        Root: import_prop_types4.default.elementType
      }),
      /**
       * The props used for each slot inside the Popper.
       *
       * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
       * @default {}
       */
      componentsProps: import_prop_types4.default.shape({
        root: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object])
      }),
      /**
       * An HTML element or function that returns one.
       * The `container` will have the portal children appended to it.
       *
       * You can also provide a callback, which is called in a React layout effect.
       * This lets you set the container from a ref, and also makes server-side rendering possible.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: import_prop_types4.default.oneOfType([HTMLElementType, import_prop_types4.default.func]),
      /**
       * The `children` will be under the DOM hierarchy of the parent component.
       * @default false
       */
      disablePortal: import_prop_types4.default.bool,
      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       * @default false
       */
      keepMounted: import_prop_types4.default.bool,
      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
       */
      modifiers: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({
        data: import_prop_types4.default.object,
        effect: import_prop_types4.default.func,
        enabled: import_prop_types4.default.bool,
        fn: import_prop_types4.default.func,
        name: import_prop_types4.default.any,
        options: import_prop_types4.default.object,
        phase: import_prop_types4.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
        requires: import_prop_types4.default.arrayOf(import_prop_types4.default.string),
        requiresIfExists: import_prop_types4.default.arrayOf(import_prop_types4.default.string)
      })),
      /**
       * If `true`, the component is shown.
       */
      open: import_prop_types4.default.bool.isRequired,
      /**
       * Popper placement.
       * @default 'bottom'
       */
      placement: import_prop_types4.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      /**
       * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
       * @default {}
       */
      popperOptions: import_prop_types4.default.shape({
        modifiers: import_prop_types4.default.array,
        onFirstUpdate: import_prop_types4.default.func,
        placement: import_prop_types4.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        strategy: import_prop_types4.default.oneOf(["absolute", "fixed"])
      }),
      /**
       * A ref that points to the used popper instance.
       */
      popperRef: refType_default,
      /**
       * The props used for each slot inside the Popper.
       * @default {}
       */
      slotProps: import_prop_types4.default.shape({
        root: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object])
      }),
      /**
       * The components used for each slot inside the Popper.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: import_prop_types4.default.shape({
        root: import_prop_types4.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object]),
      /**
       * Help supporting a react-transition-group/Transition component.
       * @default false
       */
      transition: import_prop_types4.default.bool
    } : void 0;
    Popper_default = Popper3;
  }
});

// node_modules/@mui/material/Popper/index.js
var init_Popper2 = __esm({
  "node_modules/@mui/material/Popper/index.js"() {
    init_Popper();
    init_popperClasses();
  }
});

// node_modules/@mui/material/Chip/chipClasses.js
function getChipUtilityClass(slot) {
  return generateUtilityClass("MuiChip", slot);
}
var chipClasses, chipClasses_default;
var init_chipClasses = __esm({
  "node_modules/@mui/material/Chip/chipClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorDefault", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
    chipClasses_default = chipClasses;
  }
});

// node_modules/@mui/material/internal/svg-icons/Cancel.js
var React5, import_jsx_runtime5, Cancel_default;
var init_Cancel = __esm({
  "node_modules/@mui/material/internal/svg-icons/Cancel.js"() {
    "use client";
    React5 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime5 = __toESM(require_jsx_runtime());
    Cancel_default = createSvgIcon((0, import_jsx_runtime5.jsx)("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), "Cancel");
  }
});

// node_modules/@mui/material/Chip/Chip.js
function isDeleteKeyboardEvent(keyboardEvent) {
  return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
}
var React6, import_prop_types5, import_jsx_runtime6, useUtilityClasses4, ChipRoot, ChipLabel, Chip, Chip_default;
var init_Chip = __esm({
  "node_modules/@mui/material/Chip/Chip.js"() {
    "use client";
    React6 = __toESM(require_react());
    import_prop_types5 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_colorManipulator();
    init_Cancel();
    init_useForkRef();
    init_unsupportedProp();
    init_capitalize();
    init_ButtonBase();
    init_zero_styled();
    init_memoTheme();
    init_createSimplePaletteValueFilter();
    init_DefaultPropsProvider();
    init_chipClasses();
    import_jsx_runtime6 = __toESM(require_jsx_runtime());
    useUtilityClasses4 = (ownerState) => {
      const {
        classes,
        disabled,
        size,
        color,
        iconColor,
        onDelete,
        clickable,
        variant
      } = ownerState;
      const slots = {
        root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color)}`, `${variant}${capitalize_default(color)}`],
        label: ["label", `label${capitalize_default(size)}`],
        avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color)}`],
        icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(iconColor)}`],
        deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color)}`]
      };
      return composeClasses(slots, getChipUtilityClass, classes);
    };
    ChipRoot = styled_default("div", {
      name: "MuiChip",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          color,
          iconColor,
          clickable,
          onDelete,
          size,
          variant
        } = ownerState;
        return [{
          [`& .${chipClasses_default.avatar}`]: styles.avatar
        }, {
          [`& .${chipClasses_default.avatar}`]: styles[`avatar${capitalize_default(size)}`]
        }, {
          [`& .${chipClasses_default.avatar}`]: styles[`avatarColor${capitalize_default(color)}`]
        }, {
          [`& .${chipClasses_default.icon}`]: styles.icon
        }, {
          [`& .${chipClasses_default.icon}`]: styles[`icon${capitalize_default(size)}`]
        }, {
          [`& .${chipClasses_default.icon}`]: styles[`iconColor${capitalize_default(iconColor)}`]
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles.deleteIcon
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles[`deleteIcon${capitalize_default(size)}`]
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles[`deleteIconColor${capitalize_default(color)}`]
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color)}`]
        }, styles.root, styles[`size${capitalize_default(size)}`], styles[`color${capitalize_default(color)}`], clickable && styles.clickable, clickable && color !== "default" && styles[`clickableColor${capitalize_default(color)})`], onDelete && styles.deletable, onDelete && color !== "default" && styles[`deletableColor${capitalize_default(color)}`], styles[variant], styles[`${variant}${capitalize_default(color)}`]];
      }
    })(memoTheme_default(({
      theme
    }) => {
      const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
      return {
        maxWidth: "100%",
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(13),
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        height: 32,
        color: (theme.vars || theme).palette.text.primary,
        backgroundColor: (theme.vars || theme).palette.action.selected,
        borderRadius: 32 / 2,
        whiteSpace: "nowrap",
        transition: theme.transitions.create(["background-color", "box-shadow"]),
        // reset cursor explicitly in case ButtonBase is used
        cursor: "unset",
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        textDecoration: "none",
        border: 0,
        // Remove `button` border
        padding: 0,
        // Remove `button` padding
        verticalAlign: "middle",
        boxSizing: "border-box",
        [`&.${chipClasses_default.disabled}`]: {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`& .${chipClasses_default.avatar}`]: {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
          fontSize: theme.typography.pxToRem(12)
        },
        [`& .${chipClasses_default.avatarColorPrimary}`]: {
          color: (theme.vars || theme).palette.primary.contrastText,
          backgroundColor: (theme.vars || theme).palette.primary.dark
        },
        [`& .${chipClasses_default.avatarColorSecondary}`]: {
          color: (theme.vars || theme).palette.secondary.contrastText,
          backgroundColor: (theme.vars || theme).palette.secondary.dark
        },
        [`& .${chipClasses_default.avatarSmall}`]: {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme.typography.pxToRem(10)
        },
        [`& .${chipClasses_default.icon}`]: {
          marginLeft: 5,
          marginRight: -6
        },
        [`& .${chipClasses_default.deleteIcon}`]: {
          WebkitTapHighlightColor: "transparent",
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme.palette.text.primary, 0.26),
          fontSize: 22,
          cursor: "pointer",
          margin: "0 5px 0 -6px",
          "&:hover": {
            color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)
          }
        },
        variants: [{
          props: {
            size: "small"
          },
          style: {
            height: 24,
            [`& .${chipClasses_default.icon}`]: {
              fontSize: 18,
              marginLeft: 4,
              marginRight: -4
            },
            [`& .${chipClasses_default.deleteIcon}`]: {
              fontSize: 16,
              marginRight: 4,
              marginLeft: -4
            }
          }
        }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(["contrastText"])).map(([color]) => {
          return {
            props: {
              color
            },
            style: {
              backgroundColor: (theme.vars || theme).palette[color].main,
              color: (theme.vars || theme).palette[color].contrastText,
              [`& .${chipClasses_default.deleteIcon}`]: {
                color: theme.vars ? `rgba(${theme.vars.palette[color].contrastTextChannel} / 0.7)` : alpha(theme.palette[color].contrastText, 0.7),
                "&:hover, &:active": {
                  color: (theme.vars || theme).palette[color].contrastText
                }
              }
            }
          };
        }), {
          props: (props) => props.iconColor === props.color,
          style: {
            [`& .${chipClasses_default.icon}`]: {
              color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
            }
          }
        }, {
          props: (props) => props.iconColor === props.color && props.color !== "default",
          style: {
            [`& .${chipClasses_default.icon}`]: {
              color: "inherit"
            }
          }
        }, {
          props: {
            onDelete: true
          },
          style: {
            [`&.${chipClasses_default.focusVisible}`]: {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
            }
          }
        }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(["dark"])).map(([color]) => {
          return {
            props: {
              color,
              onDelete: true
            },
            style: {
              [`&.${chipClasses_default.focusVisible}`]: {
                background: (theme.vars || theme).palette[color].dark
              }
            }
          };
        }), {
          props: {
            clickable: true
          },
          style: {
            userSelect: "none",
            WebkitTapHighlightColor: "transparent",
            cursor: "pointer",
            "&:hover": {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
            },
            [`&.${chipClasses_default.focusVisible}`]: {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
            },
            "&:active": {
              boxShadow: (theme.vars || theme).shadows[1]
            }
          }
        }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(["dark"])).map(([color]) => ({
          props: {
            color,
            clickable: true
          },
          style: {
            [`&:hover, &.${chipClasses_default.focusVisible}`]: {
              backgroundColor: (theme.vars || theme).palette[color].dark
            }
          }
        })), {
          props: {
            variant: "outlined"
          },
          style: {
            backgroundColor: "transparent",
            border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
            [`&.${chipClasses_default.clickable}:hover`]: {
              backgroundColor: (theme.vars || theme).palette.action.hover
            },
            [`&.${chipClasses_default.focusVisible}`]: {
              backgroundColor: (theme.vars || theme).palette.action.focus
            },
            [`& .${chipClasses_default.avatar}`]: {
              marginLeft: 4
            },
            [`& .${chipClasses_default.avatarSmall}`]: {
              marginLeft: 2
            },
            [`& .${chipClasses_default.icon}`]: {
              marginLeft: 4
            },
            [`& .${chipClasses_default.iconSmall}`]: {
              marginLeft: 2
            },
            [`& .${chipClasses_default.deleteIcon}`]: {
              marginRight: 5
            },
            [`& .${chipClasses_default.deleteIconSmall}`]: {
              marginRight: 3
            }
          }
        }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
          props: {
            variant: "outlined",
            color
          },
          style: {
            color: (theme.vars || theme).palette[color].main,
            border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / 0.7)` : alpha(theme.palette[color].main, 0.7)}`,
            [`&.${chipClasses_default.clickable}:hover`]: {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)
            },
            [`&.${chipClasses_default.focusVisible}`]: {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[color].main, theme.palette.action.focusOpacity)
            },
            [`& .${chipClasses_default.deleteIcon}`]: {
              color: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / 0.7)` : alpha(theme.palette[color].main, 0.7),
              "&:hover, &:active": {
                color: (theme.vars || theme).palette[color].main
              }
            }
          }
        }))]
      };
    }));
    ChipLabel = styled_default("span", {
      name: "MuiChip",
      slot: "Label",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          size
        } = ownerState;
        return [styles.label, styles[`label${capitalize_default(size)}`]];
      }
    })({
      overflow: "hidden",
      textOverflow: "ellipsis",
      paddingLeft: 12,
      paddingRight: 12,
      whiteSpace: "nowrap",
      variants: [{
        props: {
          variant: "outlined"
        },
        style: {
          paddingLeft: 11,
          paddingRight: 11
        }
      }, {
        props: {
          size: "small"
        },
        style: {
          paddingLeft: 8,
          paddingRight: 8
        }
      }, {
        props: {
          size: "small",
          variant: "outlined"
        },
        style: {
          paddingLeft: 7,
          paddingRight: 7
        }
      }]
    });
    Chip = React6.forwardRef(function Chip2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiChip"
      });
      const {
        avatar: avatarProp,
        className,
        clickable: clickableProp,
        color = "default",
        component: ComponentProp,
        deleteIcon: deleteIconProp,
        disabled = false,
        icon: iconProp,
        label,
        onClick,
        onDelete,
        onKeyDown,
        onKeyUp,
        size = "medium",
        variant = "filled",
        tabIndex,
        skipFocusWhenDisabled = false,
        // TODO v6: Rename to `focusableWhenDisabled`.
        ...other
      } = props;
      const chipRef = React6.useRef(null);
      const handleRef = useForkRef_default(chipRef, ref);
      const handleDeleteIconClick = (event) => {
        event.stopPropagation();
        if (onDelete) {
          onDelete(event);
        }
      };
      const handleKeyDown = (event) => {
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleKeyUp = (event) => {
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          }
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
      };
      const clickable = clickableProp !== false && onClick ? true : clickableProp;
      const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
      const ownerState = {
        ...props,
        component,
        disabled,
        size,
        color,
        iconColor: React6.isValidElement(iconProp) ? iconProp.props.color || color : color,
        onDelete: !!onDelete,
        clickable,
        variant
      };
      const classes = useUtilityClasses4(ownerState);
      const moreProps = component === ButtonBase_default ? {
        component: ComponentProp || "div",
        focusVisibleClassName: classes.focusVisible,
        ...onDelete && {
          disableRipple: true
        }
      } : {};
      let deleteIcon = null;
      if (onDelete) {
        deleteIcon = deleteIconProp && React6.isValidElement(deleteIconProp) ? React6.cloneElement(deleteIconProp, {
          className: clsx_default(deleteIconProp.props.className, classes.deleteIcon),
          onClick: handleDeleteIconClick
        }) : (0, import_jsx_runtime6.jsx)(Cancel_default, {
          className: clsx_default(classes.deleteIcon),
          onClick: handleDeleteIconClick
        });
      }
      let avatar = null;
      if (avatarProp && React6.isValidElement(avatarProp)) {
        avatar = React6.cloneElement(avatarProp, {
          className: clsx_default(classes.avatar, avatarProp.props.className)
        });
      }
      let icon = null;
      if (iconProp && React6.isValidElement(iconProp)) {
        icon = React6.cloneElement(iconProp, {
          className: clsx_default(classes.icon, iconProp.props.className)
        });
      }
      if (true) {
        if (avatar && icon) {
          console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
        }
      }
      return (0, import_jsx_runtime6.jsxs)(ChipRoot, {
        as: component,
        className: clsx_default(classes.root, className),
        disabled: clickable && disabled ? true : void 0,
        onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef,
        tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
        ownerState,
        ...moreProps,
        ...other,
        children: [avatar || icon, (0, import_jsx_runtime6.jsx)(ChipLabel, {
          className: clsx_default(classes.label),
          ownerState,
          children: label
        }), deleteIcon]
      });
    });
    true ? Chip.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The Avatar element to display.
       */
      avatar: import_prop_types5.default.element,
      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: unsupportedProp_default,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types5.default.object,
      /**
       * @ignore
       */
      className: import_prop_types5.default.string,
      /**
       * If `true`, the chip will appear clickable, and will raise when pressed,
       * even if the onClick prop is not defined.
       * If `false`, the chip will not appear clickable, even if onClick prop is defined.
       * This can be used, for example,
       * along with the component prop to indicate an anchor Chip is clickable.
       * Note: this controls the UI and does not affect the onClick event.
       */
      clickable: import_prop_types5.default.bool,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'default'
       */
      color: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types5.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types5.default.elementType,
      /**
       * Override the default delete icon element. Shown only if `onDelete` is set.
       */
      deleteIcon: import_prop_types5.default.element,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: import_prop_types5.default.bool,
      /**
       * Icon element.
       */
      icon: import_prop_types5.default.element,
      /**
       * The content of the component.
       */
      label: import_prop_types5.default.node,
      /**
       * @ignore
       */
      onClick: import_prop_types5.default.func,
      /**
       * Callback fired when the delete icon is clicked.
       * If set, the delete icon will be shown.
       */
      onDelete: import_prop_types5.default.func,
      /**
       * @ignore
       */
      onKeyDown: import_prop_types5.default.func,
      /**
       * @ignore
       */
      onKeyUp: import_prop_types5.default.func,
      /**
       * The size of the component.
       * @default 'medium'
       */
      size: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["medium", "small"]), import_prop_types5.default.string]),
      /**
       * If `true`, allows the disabled chip to escape focus.
       * If `false`, allows the disabled chip to receive focus.
       * @default false
       */
      skipFocusWhenDisabled: import_prop_types5.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
      /**
       * @ignore
       */
      tabIndex: import_prop_types5.default.number,
      /**
       * The variant to use.
       * @default 'filled'
       */
      variant: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["filled", "outlined"]), import_prop_types5.default.string])
    } : void 0;
    Chip_default = Chip;
  }
});

// node_modules/@mui/material/Chip/index.js
var Chip_exports = {};
__export(Chip_exports, {
  chipClasses: () => chipClasses_default,
  default: () => Chip_default,
  getChipUtilityClass: () => getChipUtilityClass
});
var init_Chip2 = __esm({
  "node_modules/@mui/material/Chip/index.js"() {
    init_Chip();
    init_chipClasses();
    init_chipClasses();
  }
});

// node_modules/@mui/material/Checkbox/checkboxClasses.js
function getCheckboxUtilityClass(slot) {
  return generateUtilityClass("MuiCheckbox", slot);
}
var checkboxClasses, checkboxClasses_default;
var init_checkboxClasses = __esm({
  "node_modules/@mui/material/Checkbox/checkboxClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
    checkboxClasses_default = checkboxClasses;
  }
});

// node_modules/@mui/material/internal/switchBaseClasses.js
function getSwitchBaseUtilityClass(slot) {
  return generateUtilityClass("PrivateSwitchBase", slot);
}
var switchBaseClasses;
var init_switchBaseClasses = __esm({
  "node_modules/@mui/material/internal/switchBaseClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
  }
});

// node_modules/@mui/material/internal/SwitchBase.js
var React7, import_prop_types6, import_jsx_runtime7, useUtilityClasses5, SwitchBaseRoot, SwitchBaseInput, SwitchBase, SwitchBase_default;
var init_SwitchBase = __esm({
  "node_modules/@mui/material/internal/SwitchBase.js"() {
    "use client";
    React7 = __toESM(require_react());
    import_prop_types6 = __toESM(require_prop_types());
    init_clsx();
    init_refType();
    init_composeClasses();
    init_capitalize();
    init_rootShouldForwardProp();
    init_zero_styled();
    init_useControlled();
    init_useFormControl();
    init_ButtonBase();
    init_switchBaseClasses();
    import_jsx_runtime7 = __toESM(require_jsx_runtime());
    useUtilityClasses5 = (ownerState) => {
      const {
        classes,
        checked,
        disabled,
        edge
      } = ownerState;
      const slots = {
        root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
        input: ["input"]
      };
      return composeClasses(slots, getSwitchBaseUtilityClass, classes);
    };
    SwitchBaseRoot = styled_default(ButtonBase_default)({
      padding: 9,
      borderRadius: "50%",
      variants: [{
        props: {
          edge: "start",
          size: "small"
        },
        style: {
          marginLeft: -3
        }
      }, {
        props: ({
          edge,
          ownerState
        }) => edge === "start" && ownerState.size !== "small",
        style: {
          marginLeft: -12
        }
      }, {
        props: {
          edge: "end",
          size: "small"
        },
        style: {
          marginRight: -3
        }
      }, {
        props: ({
          edge,
          ownerState
        }) => edge === "end" && ownerState.size !== "small",
        style: {
          marginRight: -12
        }
      }]
    });
    SwitchBaseInput = styled_default("input", {
      shouldForwardProp: rootShouldForwardProp_default
    })({
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    });
    SwitchBase = React7.forwardRef(function SwitchBase2(props, ref) {
      const {
        autoFocus,
        checked: checkedProp,
        checkedIcon,
        className,
        defaultChecked,
        disabled: disabledProp,
        disableFocusRipple = false,
        edge = false,
        icon,
        id,
        inputProps,
        inputRef,
        name,
        onBlur,
        onChange,
        onFocus,
        readOnly,
        required = false,
        tabIndex,
        type,
        value,
        ...other
      } = props;
      const [checked, setCheckedState] = useControlled_default({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: "SwitchBase",
        state: "checked"
      });
      const muiFormControl = useFormControl();
      const handleFocus = (event) => {
        if (onFocus) {
          onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      const handleInputChange = (event) => {
        if (event.nativeEvent.defaultPrevented) {
          return;
        }
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) {
          onChange(event, newChecked);
        }
      };
      let disabled = disabledProp;
      if (muiFormControl) {
        if (typeof disabled === "undefined") {
          disabled = muiFormControl.disabled;
        }
      }
      const hasLabelFor = type === "checkbox" || type === "radio";
      const ownerState = {
        ...props,
        checked,
        disabled,
        disableFocusRipple,
        edge
      };
      const classes = useUtilityClasses5(ownerState);
      return (0, import_jsx_runtime7.jsxs)(SwitchBaseRoot, {
        component: "span",
        className: clsx_default(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        tabIndex: null,
        role: void 0,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ownerState,
        ref,
        ...other,
        children: [(0, import_jsx_runtime7.jsx)(SwitchBaseInput, {
          autoFocus,
          checked: checkedProp,
          defaultChecked,
          className: classes.input,
          disabled,
          id: hasLabelFor ? id : void 0,
          name,
          onChange: handleInputChange,
          readOnly,
          ref: inputRef,
          required,
          ownerState,
          tabIndex,
          type,
          ...type === "checkbox" && value === void 0 ? {} : {
            value
          },
          ...inputProps
        }), checked ? checkedIcon : icon]
      });
    });
    true ? SwitchBase.propTypes = {
      /**
       * If `true`, the `input` element is focused during the first mount.
       */
      autoFocus: import_prop_types6.default.bool,
      /**
       * If `true`, the component is checked.
       */
      checked: import_prop_types6.default.bool,
      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: import_prop_types6.default.node.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types6.default.object,
      /**
       * @ignore
       */
      className: import_prop_types6.default.string,
      /**
       * @ignore
       */
      defaultChecked: import_prop_types6.default.bool,
      /**
       * If `true`, the component is disabled.
       */
      disabled: import_prop_types6.default.bool,
      /**
       * If `true`, the  keyboard focus ripple is disabled.
       * @default false
       */
      disableFocusRipple: import_prop_types6.default.bool,
      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       * @default false
       */
      edge: import_prop_types6.default.oneOf(["end", "start", false]),
      /**
       * The icon to display when the component is unchecked.
       */
      icon: import_prop_types6.default.node.isRequired,
      /**
       * The id of the `input` element.
       */
      id: import_prop_types6.default.string,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: import_prop_types6.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType_default,
      /*
       * @ignore
       */
      name: import_prop_types6.default.string,
      /**
       * @ignore
       */
      onBlur: import_prop_types6.default.func,
      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: import_prop_types6.default.func,
      /**
       * @ignore
       */
      onFocus: import_prop_types6.default.func,
      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: import_prop_types6.default.bool,
      /**
       * If `true`, the `input` element is required.
       */
      required: import_prop_types6.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types6.default.object,
      /**
       * @ignore
       */
      tabIndex: import_prop_types6.default.oneOfType([import_prop_types6.default.number, import_prop_types6.default.string]),
      /**
       * The input component prop `type`.
       */
      type: import_prop_types6.default.string.isRequired,
      /**
       * The value of the component.
       */
      value: import_prop_types6.default.any
    } : void 0;
    SwitchBase_default = SwitchBase;
  }
});

// node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
var React8, import_jsx_runtime8, CheckBoxOutlineBlank_default;
var init_CheckBoxOutlineBlank = __esm({
  "node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js"() {
    "use client";
    React8 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime8 = __toESM(require_jsx_runtime());
    CheckBoxOutlineBlank_default = createSvgIcon((0, import_jsx_runtime8.jsx)("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), "CheckBoxOutlineBlank");
  }
});

// node_modules/@mui/material/internal/svg-icons/CheckBox.js
var React9, import_jsx_runtime9, CheckBox_default;
var init_CheckBox = __esm({
  "node_modules/@mui/material/internal/svg-icons/CheckBox.js"() {
    "use client";
    React9 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime9 = __toESM(require_jsx_runtime());
    CheckBox_default = createSvgIcon((0, import_jsx_runtime9.jsx)("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), "CheckBox");
  }
});

// node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
var React10, import_jsx_runtime10, IndeterminateCheckBox_default;
var init_IndeterminateCheckBox = __esm({
  "node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js"() {
    "use client";
    React10 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime10 = __toESM(require_jsx_runtime());
    IndeterminateCheckBox_default = createSvgIcon((0, import_jsx_runtime10.jsx)("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), "IndeterminateCheckBox");
  }
});

// node_modules/@mui/material/Checkbox/Checkbox.js
var React11, import_prop_types7, import_jsx_runtime11, useUtilityClasses6, CheckboxRoot, defaultCheckedIcon, defaultIcon, defaultIndeterminateIcon, Checkbox, Checkbox_default;
var init_Checkbox = __esm({
  "node_modules/@mui/material/Checkbox/Checkbox.js"() {
    "use client";
    React11 = __toESM(require_react());
    import_prop_types7 = __toESM(require_prop_types());
    init_clsx();
    init_refType();
    init_composeClasses();
    init_colorManipulator();
    init_SwitchBase();
    init_CheckBoxOutlineBlank();
    init_CheckBox();
    init_IndeterminateCheckBox();
    init_capitalize();
    init_rootShouldForwardProp();
    init_checkboxClasses();
    init_zero_styled();
    init_memoTheme();
    init_createSimplePaletteValueFilter();
    init_DefaultPropsProvider();
    import_jsx_runtime11 = __toESM(require_jsx_runtime());
    useUtilityClasses6 = (ownerState) => {
      const {
        classes,
        indeterminate,
        color,
        size
      } = ownerState;
      const slots = {
        root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color)}`, `size${capitalize_default(size)}`]
      };
      const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
      return {
        ...classes,
        // forward the disabled and checked classes to the SwitchBase
        ...composedClasses
      };
    };
    CheckboxRoot = styled_default(SwitchBase_default, {
      shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
      name: "MuiCheckbox",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize_default(ownerState.size)}`], ownerState.color !== "default" && styles[`color${capitalize_default(ownerState.color)}`]];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      color: (theme.vars || theme).palette.text.secondary,
      variants: [{
        props: {
          color: "default",
          disableRipple: false
        },
        style: {
          "&:hover": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
          }
        }
      }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
        props: {
          color,
          disableRipple: false
        },
        style: {
          "&:hover": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)
          }
        }
      })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
        props: {
          color
        },
        style: {
          [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
            color: (theme.vars || theme).palette[color].main
          },
          [`&.${checkboxClasses_default.disabled}`]: {
            color: (theme.vars || theme).palette.action.disabled
          }
        }
      })), {
        // Should be last to override other colors
        props: {
          disableRipple: false
        },
        style: {
          // Reset on touch devices, it doesn't add specificity
          "&:hover": {
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        }
      }]
    })));
    defaultCheckedIcon = (0, import_jsx_runtime11.jsx)(CheckBox_default, {});
    defaultIcon = (0, import_jsx_runtime11.jsx)(CheckBoxOutlineBlank_default, {});
    defaultIndeterminateIcon = (0, import_jsx_runtime11.jsx)(IndeterminateCheckBox_default, {});
    Checkbox = React11.forwardRef(function Checkbox2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiCheckbox"
      });
      const {
        checkedIcon = defaultCheckedIcon,
        color = "primary",
        icon: iconProp = defaultIcon,
        indeterminate = false,
        indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
        inputProps,
        size = "medium",
        disableRipple = false,
        className,
        ...other
      } = props;
      const icon = indeterminate ? indeterminateIconProp : iconProp;
      const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      const ownerState = {
        ...props,
        disableRipple,
        color,
        indeterminate,
        size
      };
      const classes = useUtilityClasses6(ownerState);
      return (0, import_jsx_runtime11.jsx)(CheckboxRoot, {
        type: "checkbox",
        inputProps: {
          "data-indeterminate": indeterminate,
          ...inputProps
        },
        icon: React11.cloneElement(icon, {
          fontSize: icon.props.fontSize ?? size
        }),
        checkedIcon: React11.cloneElement(indeterminateIcon, {
          fontSize: indeterminateIcon.props.fontSize ?? size
        }),
        ownerState,
        ref,
        className: clsx_default(classes.root, className),
        ...other,
        classes
      });
    });
    true ? Checkbox.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the component is checked.
       */
      checked: import_prop_types7.default.bool,
      /**
       * The icon to display when the component is checked.
       * @default <CheckBoxIcon />
       */
      checkedIcon: import_prop_types7.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types7.default.object,
      /**
       * @ignore
       */
      className: import_prop_types7.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types7.default.string]),
      /**
       * The default checked state. Use when the component is not controlled.
       */
      defaultChecked: import_prop_types7.default.bool,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: import_prop_types7.default.bool,
      /**
       * If `true`, the ripple effect is disabled.
       * @default false
       */
      disableRipple: import_prop_types7.default.bool,
      /**
       * The icon to display when the component is unchecked.
       * @default <CheckBoxOutlineBlankIcon />
       */
      icon: import_prop_types7.default.node,
      /**
       * The id of the `input` element.
       */
      id: import_prop_types7.default.string,
      /**
       * If `true`, the component appears indeterminate.
       * This does not set the native input element to indeterminate due
       * to inconsistent behavior across browsers.
       * However, we set a `data-indeterminate` attribute on the `input`.
       * @default false
       */
      indeterminate: import_prop_types7.default.bool,
      /**
       * The icon to display when the component is indeterminate.
       * @default <IndeterminateCheckBoxIcon />
       */
      indeterminateIcon: import_prop_types7.default.node,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: import_prop_types7.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType_default,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: import_prop_types7.default.func,
      /**
       * If `true`, the `input` element is required.
       * @default false
       */
      required: import_prop_types7.default.bool,
      /**
       * The size of the component.
       * `small` is equivalent to the dense checkbox styling.
       * @default 'medium'
       */
      size: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["medium", "small"]), import_prop_types7.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: import_prop_types7.default.any
    } : void 0;
    Checkbox_default = Checkbox;
  }
});

// node_modules/@mui/material/Checkbox/index.js
var Checkbox_exports = {};
__export(Checkbox_exports, {
  checkboxClasses: () => checkboxClasses_default,
  default: () => Checkbox_default,
  getCheckboxUtilityClass: () => getCheckboxUtilityClass
});
var init_Checkbox2 = __esm({
  "node_modules/@mui/material/Checkbox/index.js"() {
    init_Checkbox();
    init_checkboxClasses();
    init_checkboxClasses();
  }
});

// node_modules/@mui/material/Divider/dividerClasses.js
function getDividerUtilityClass(slot) {
  return generateUtilityClass("MuiDivider", slot);
}
var dividerClasses, dividerClasses_default;
var init_dividerClasses = __esm({
  "node_modules/@mui/material/Divider/dividerClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
    dividerClasses_default = dividerClasses;
  }
});

// node_modules/@mui/material/Divider/Divider.js
var React12, import_prop_types8, import_jsx_runtime12, useUtilityClasses7, DividerRoot, DividerWrapper, Divider, Divider_default;
var init_Divider = __esm({
  "node_modules/@mui/material/Divider/Divider.js"() {
    "use client";
    React12 = __toESM(require_react());
    import_prop_types8 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_colorManipulator();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_dividerClasses();
    import_jsx_runtime12 = __toESM(require_jsx_runtime());
    useUtilityClasses7 = (ownerState) => {
      const {
        absolute,
        children,
        classes,
        flexItem,
        light,
        orientation,
        textAlign,
        variant
      } = ownerState;
      const slots = {
        root: ["root", absolute && "absolute", variant, light && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign === "right" && orientation !== "vertical" && "textAlignRight", textAlign === "left" && orientation !== "vertical" && "textAlignLeft"],
        wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
      };
      return composeClasses(slots, getDividerUtilityClass, classes);
    };
    DividerRoot = styled_default("div", {
      name: "MuiDivider",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === "vertical" && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles.textAlignLeft];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      margin: 0,
      // Reset browser default style.
      flexShrink: 0,
      borderWidth: 0,
      borderStyle: "solid",
      borderColor: (theme.vars || theme).palette.divider,
      borderBottomWidth: "thin",
      variants: [{
        props: {
          absolute: true
        },
        style: {
          position: "absolute",
          bottom: 0,
          left: 0,
          width: "100%"
        }
      }, {
        props: {
          light: true
        },
        style: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)
        }
      }, {
        props: {
          variant: "inset"
        },
        style: {
          marginLeft: 72
        }
      }, {
        props: {
          variant: "middle",
          orientation: "horizontal"
        },
        style: {
          marginLeft: theme.spacing(2),
          marginRight: theme.spacing(2)
        }
      }, {
        props: {
          variant: "middle",
          orientation: "vertical"
        },
        style: {
          marginTop: theme.spacing(1),
          marginBottom: theme.spacing(1)
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          height: "100%",
          borderBottomWidth: 0,
          borderRightWidth: "thin"
        }
      }, {
        props: {
          flexItem: true
        },
        style: {
          alignSelf: "stretch",
          height: "auto"
        }
      }, {
        props: ({
          ownerState
        }) => !!ownerState.children,
        style: {
          display: "flex",
          whiteSpace: "nowrap",
          textAlign: "center",
          border: 0,
          borderTopStyle: "solid",
          borderLeftStyle: "solid",
          "&::before, &::after": {
            content: '""',
            alignSelf: "center"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.children && ownerState.orientation !== "vertical",
        style: {
          "&::before, &::after": {
            width: "100%",
            borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,
            borderTopStyle: "inherit"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.orientation === "vertical" && ownerState.children,
        style: {
          flexDirection: "column",
          "&::before, &::after": {
            height: "100%",
            borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,
            borderLeftStyle: "inherit"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.textAlign === "right" && ownerState.orientation !== "vertical",
        style: {
          "&::before": {
            width: "90%"
          },
          "&::after": {
            width: "10%"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.textAlign === "left" && ownerState.orientation !== "vertical",
        style: {
          "&::before": {
            width: "10%"
          },
          "&::after": {
            width: "90%"
          }
        }
      }]
    })));
    DividerWrapper = styled_default("span", {
      name: "MuiDivider",
      slot: "Wrapper",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.wrapper, ownerState.orientation === "vertical" && styles.wrapperVertical];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      display: "inline-block",
      paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
      paddingRight: `calc(${theme.spacing(1)} * 1.2)`,
      variants: [{
        props: {
          orientation: "vertical"
        },
        style: {
          paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
          paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
        }
      }]
    })));
    Divider = React12.forwardRef(function Divider2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiDivider"
      });
      const {
        absolute = false,
        children,
        className,
        orientation = "horizontal",
        component = children || orientation === "vertical" ? "div" : "hr",
        flexItem = false,
        light = false,
        role = component !== "hr" ? "separator" : void 0,
        textAlign = "center",
        variant = "fullWidth",
        ...other
      } = props;
      const ownerState = {
        ...props,
        absolute,
        component,
        flexItem,
        light,
        orientation,
        role,
        textAlign,
        variant
      };
      const classes = useUtilityClasses7(ownerState);
      return (0, import_jsx_runtime12.jsx)(DividerRoot, {
        as: component,
        className: clsx_default(classes.root, className),
        role,
        ref,
        ownerState,
        "aria-orientation": role === "separator" && (component !== "hr" || orientation === "vertical") ? orientation : void 0,
        ...other,
        children: children ? (0, import_jsx_runtime12.jsx)(DividerWrapper, {
          className: classes.wrapper,
          ownerState,
          children
        }) : null
      });
    });
    if (Divider) {
      Divider.muiSkipListHighlight = true;
    }
    true ? Divider.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Absolutely position the element.
       * @default false
       */
      absolute: import_prop_types8.default.bool,
      /**
       * The content of the component.
       */
      children: import_prop_types8.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types8.default.object,
      /**
       * @ignore
       */
      className: import_prop_types8.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types8.default.elementType,
      /**
       * If `true`, a vertical divider will have the correct height when used in flex container.
       * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
       * @default false
       */
      flexItem: import_prop_types8.default.bool,
      /**
       * If `true`, the divider will have a lighter color.
       * @default false
       * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      light: import_prop_types8.default.bool,
      /**
       * The component orientation.
       * @default 'horizontal'
       */
      orientation: import_prop_types8.default.oneOf(["horizontal", "vertical"]),
      /**
       * @ignore
       */
      role: import_prop_types8.default.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
      /**
       * The text alignment.
       * @default 'center'
       */
      textAlign: import_prop_types8.default.oneOf(["center", "left", "right"]),
      /**
       * The variant to use.
       * @default 'fullWidth'
       */
      variant: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["fullWidth", "inset", "middle"]), import_prop_types8.default.string])
    } : void 0;
    Divider_default = Divider;
  }
});

// node_modules/@mui/material/Divider/index.js
var init_Divider2 = __esm({
  "node_modules/@mui/material/Divider/index.js"() {
    init_Divider();
    init_dividerClasses();
    init_dividerClasses();
  }
});

// node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
function getFormControlLabelUtilityClasses(slot) {
  return generateUtilityClass("MuiFormControlLabel", slot);
}
var formControlLabelClasses, formControlLabelClasses_default;
var init_formControlLabelClasses = __esm({
  "node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
    formControlLabelClasses_default = formControlLabelClasses;
  }
});

// node_modules/@mui/material/FormControlLabel/FormControlLabel.js
var React13, import_prop_types9, import_jsx_runtime13, useUtilityClasses8, FormControlLabelRoot, AsteriskComponent, FormControlLabel, FormControlLabel_default;
var init_FormControlLabel = __esm({
  "node_modules/@mui/material/FormControlLabel/FormControlLabel.js"() {
    "use client";
    React13 = __toESM(require_react());
    import_prop_types9 = __toESM(require_prop_types());
    init_clsx();
    init_refType();
    init_composeClasses();
    init_FormControl();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_Typography2();
    init_capitalize();
    init_formControlLabelClasses();
    init_formControlState();
    init_useSlot();
    import_jsx_runtime13 = __toESM(require_jsx_runtime());
    useUtilityClasses8 = (ownerState) => {
      const {
        classes,
        disabled,
        labelPlacement,
        error,
        required
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error", required && "required"],
        label: ["label", disabled && "disabled"],
        asterisk: ["asterisk", error && "error"]
      };
      return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
    };
    FormControlLabelRoot = styled_default("label", {
      name: "MuiFormControlLabel",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formControlLabelClasses_default.label}`]: styles.label
        }, styles.root, styles[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      display: "inline-flex",
      alignItems: "center",
      cursor: "pointer",
      // For correct alignment with the text.
      verticalAlign: "middle",
      WebkitTapHighlightColor: "transparent",
      marginLeft: -11,
      marginRight: 16,
      // used for row presentation of radio/checkbox
      [`&.${formControlLabelClasses_default.disabled}`]: {
        cursor: "default"
      },
      [`& .${formControlLabelClasses_default.label}`]: {
        [`&.${formControlLabelClasses_default.disabled}`]: {
          color: (theme.vars || theme).palette.text.disabled
        }
      },
      variants: [{
        props: {
          labelPlacement: "start"
        },
        style: {
          flexDirection: "row-reverse",
          marginRight: -11
        }
      }, {
        props: {
          labelPlacement: "top"
        },
        style: {
          flexDirection: "column-reverse"
        }
      }, {
        props: {
          labelPlacement: "bottom"
        },
        style: {
          flexDirection: "column"
        }
      }, {
        props: ({
          labelPlacement
        }) => labelPlacement === "start" || labelPlacement === "top" || labelPlacement === "bottom",
        style: {
          marginLeft: 16
          // used for row presentation of radio/checkbox
        }
      }]
    })));
    AsteriskComponent = styled_default("span", {
      name: "MuiFormControlLabel",
      slot: "Asterisk",
      overridesResolver: (props, styles) => styles.asterisk
    })(memoTheme_default(({
      theme
    }) => ({
      [`&.${formControlLabelClasses_default.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    })));
    FormControlLabel = React13.forwardRef(function FormControlLabel2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiFormControlLabel"
      });
      const {
        checked,
        className,
        componentsProps = {},
        control,
        disabled: disabledProp,
        disableTypography,
        inputRef,
        label: labelProp,
        labelPlacement = "end",
        name,
        onChange,
        required: requiredProp,
        slots = {},
        slotProps = {},
        value,
        ...other
      } = props;
      const muiFormControl = useFormControl();
      const disabled = disabledProp ?? control.props.disabled ?? (muiFormControl == null ? void 0 : muiFormControl.disabled);
      const required = requiredProp ?? control.props.required;
      const controlProps = {
        disabled,
        required
      };
      ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
        if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
          controlProps[key] = props[key];
        }
      });
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["error"]
      });
      const ownerState = {
        ...props,
        disabled,
        labelPlacement,
        required,
        error: fcs.error
      };
      const classes = useUtilityClasses8(ownerState);
      const externalForwardedProps = {
        slots,
        slotProps: {
          ...componentsProps,
          ...slotProps
        }
      };
      const [TypographySlot, typographySlotProps] = useSlot("typography", {
        elementType: Typography_default,
        externalForwardedProps,
        ownerState
      });
      let label = labelProp;
      if (label != null && label.type !== Typography_default && !disableTypography) {
        label = (0, import_jsx_runtime13.jsx)(TypographySlot, {
          component: "span",
          ...typographySlotProps,
          className: clsx_default(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
          children: label
        });
      }
      return (0, import_jsx_runtime13.jsxs)(FormControlLabelRoot, {
        className: clsx_default(classes.root, className),
        ownerState,
        ref,
        ...other,
        children: [React13.cloneElement(control, controlProps), required ? (0, import_jsx_runtime13.jsxs)("div", {
          children: [label, (0, import_jsx_runtime13.jsxs)(AsteriskComponent, {
            ownerState,
            "aria-hidden": true,
            className: classes.asterisk,
            children: [" ", "*"]
          })]
        }) : label]
      });
    });
    true ? FormControlLabel.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the component appears selected.
       */
      checked: import_prop_types9.default.bool,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types9.default.object,
      /**
       * @ignore
       */
      className: import_prop_types9.default.string,
      /**
       * The props used for each slot inside.
       * @default {}
       * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      componentsProps: import_prop_types9.default.shape({
        typography: import_prop_types9.default.object
      }),
      /**
       * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
       */
      control: import_prop_types9.default.element.isRequired,
      /**
       * If `true`, the control is disabled.
       */
      disabled: import_prop_types9.default.bool,
      /**
       * If `true`, the label is rendered as it is passed without an additional typography node.
       */
      disableTypography: import_prop_types9.default.bool,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType_default,
      /**
       * A text or an element to be used in an enclosing label element.
       */
      label: import_prop_types9.default.node,
      /**
       * The position of the label.
       * @default 'end'
       */
      labelPlacement: import_prop_types9.default.oneOf(["bottom", "end", "start", "top"]),
      /**
       * @ignore
       */
      name: import_prop_types9.default.string,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: import_prop_types9.default.func,
      /**
       * If `true`, the label will indicate that the `input` is required.
       */
      required: import_prop_types9.default.bool,
      /**
       * The props used for each slot inside.
       * @default {}
       */
      slotProps: import_prop_types9.default.shape({
        typography: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object])
      }),
      /**
       * The components used for each slot inside.
       * @default {}
       */
      slots: import_prop_types9.default.shape({
        typography: import_prop_types9.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object]),
      /**
       * The value of the component.
       */
      value: import_prop_types9.default.any
    } : void 0;
    FormControlLabel_default = FormControlLabel;
  }
});

// node_modules/@mui/material/FormControlLabel/index.js
var FormControlLabel_exports = {};
__export(FormControlLabel_exports, {
  default: () => FormControlLabel_default,
  formControlLabelClasses: () => formControlLabelClasses_default,
  getFormControlLabelUtilityClasses: () => getFormControlLabelUtilityClasses
});
var init_FormControlLabel2 = __esm({
  "node_modules/@mui/material/FormControlLabel/index.js"() {
    init_FormControlLabel();
    init_formControlLabelClasses();
    init_formControlLabelClasses();
  }
});

// node_modules/@mui/material/FormGroup/formGroupClasses.js
function getFormGroupUtilityClass(slot) {
  return generateUtilityClass("MuiFormGroup", slot);
}
var formGroupClasses, formGroupClasses_default;
var init_formGroupClasses = __esm({
  "node_modules/@mui/material/FormGroup/formGroupClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    formGroupClasses = generateUtilityClasses("MuiFormGroup", ["root", "row", "error"]);
    formGroupClasses_default = formGroupClasses;
  }
});

// node_modules/@mui/material/FormGroup/FormGroup.js
var React14, import_prop_types10, import_jsx_runtime14, useUtilityClasses9, FormGroupRoot, FormGroup, FormGroup_default;
var init_FormGroup = __esm({
  "node_modules/@mui/material/FormGroup/FormGroup.js"() {
    "use client";
    React14 = __toESM(require_react());
    import_prop_types10 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_zero_styled();
    init_DefaultPropsProvider();
    init_formGroupClasses();
    init_useFormControl();
    init_formControlState();
    import_jsx_runtime14 = __toESM(require_jsx_runtime());
    useUtilityClasses9 = (ownerState) => {
      const {
        classes,
        row,
        error
      } = ownerState;
      const slots = {
        root: ["root", row && "row", error && "error"]
      };
      return composeClasses(slots, getFormGroupUtilityClass, classes);
    };
    FormGroupRoot = styled_default("div", {
      name: "MuiFormGroup",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.row && styles.row];
      }
    })({
      display: "flex",
      flexDirection: "column",
      flexWrap: "wrap",
      variants: [{
        props: {
          row: true
        },
        style: {
          flexDirection: "row"
        }
      }]
    });
    FormGroup = React14.forwardRef(function FormGroup2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiFormGroup"
      });
      const {
        className,
        row = false,
        ...other
      } = props;
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["error"]
      });
      const ownerState = {
        ...props,
        row,
        error: fcs.error
      };
      const classes = useUtilityClasses9(ownerState);
      return (0, import_jsx_runtime14.jsx)(FormGroupRoot, {
        className: clsx_default(classes.root, className),
        ownerState,
        ref,
        ...other
      });
    });
    true ? FormGroup.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: import_prop_types10.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types10.default.object,
      /**
       * @ignore
       */
      className: import_prop_types10.default.string,
      /**
       * Display group of elements in a compact row.
       * @default false
       */
      row: import_prop_types10.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object])
    } : void 0;
    FormGroup_default = FormGroup;
  }
});

// node_modules/@mui/material/FormGroup/index.js
var FormGroup_exports = {};
__export(FormGroup_exports, {
  default: () => FormGroup_default,
  formGroupClasses: () => formGroupClasses_default,
  getFormGroupUtilityClass: () => getFormGroupUtilityClass
});
var init_FormGroup2 = __esm({
  "node_modules/@mui/material/FormGroup/index.js"() {
    init_FormGroup();
    init_formGroupClasses();
    init_formGroupClasses();
  }
});

// node_modules/@mui/material/Grid/GridContext.js
var React15, GridContext, GridContext_default;
var init_GridContext = __esm({
  "node_modules/@mui/material/Grid/GridContext.js"() {
    "use client";
    React15 = __toESM(require_react());
    GridContext = React15.createContext();
    if (true) {
      GridContext.displayName = "GridContext";
    }
    GridContext_default = GridContext;
  }
});

// node_modules/@mui/material/Grid/gridClasses.js
function getGridUtilityClass(slot) {
  return generateUtilityClass("MuiGrid", slot);
}
var SPACINGS, DIRECTIONS, WRAPS, GRID_SIZES, gridClasses, gridClasses_default;
var init_gridClasses = __esm({
  "node_modules/@mui/material/Grid/gridClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
    WRAPS = ["nowrap", "wrap-reverse", "wrap"];
    GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    gridClasses = generateUtilityClasses("MuiGrid", [
      "root",
      "container",
      "item",
      "zeroMinWidth",
      // spacings
      ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
      // direction values
      ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
      // wrap values
      ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
      // grid sizes for all breakpoints
      ...GRID_SIZES.map((size) => `grid-xs-${size}`),
      ...GRID_SIZES.map((size) => `grid-sm-${size}`),
      ...GRID_SIZES.map((size) => `grid-md-${size}`),
      ...GRID_SIZES.map((size) => `grid-lg-${size}`),
      ...GRID_SIZES.map((size) => `grid-xl-${size}`)
    ]);
    gridClasses_default = gridClasses;
  }
});

// node_modules/@mui/material/Grid/Grid.js
function generateGrid({
  theme,
  ownerState
}) {
  let size;
  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
    let styles = {};
    if (ownerState[breakpoint]) {
      size = ownerState[breakpoint];
    }
    if (!size) {
      return globalStyles;
    }
    if (size === true) {
      styles = {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: "100%"
      };
    } else if (size === "auto") {
      styles = {
        flexBasis: "auto",
        flexGrow: 0,
        flexShrink: 0,
        maxWidth: "none",
        width: "auto"
      };
    } else {
      const columnsBreakpointValues = resolveBreakpointValues({
        values: ownerState.columns,
        breakpoints: theme.breakpoints.values
      });
      const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
      if (columnValue === void 0 || columnValue === null) {
        return globalStyles;
      }
      const width = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
      let more = {};
      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
        const themeSpacing = theme.spacing(ownerState.columnSpacing);
        if (themeSpacing !== "0px") {
          const fullWidth = `calc(${width} + ${themeSpacing})`;
          more = {
            flexBasis: fullWidth,
            maxWidth: fullWidth
          };
        }
      }
      styles = {
        flexBasis: width,
        flexGrow: 0,
        maxWidth: width,
        ...more
      };
    }
    if (theme.breakpoints.values[breakpoint] === 0) {
      Object.assign(globalStyles, styles);
    } else {
      globalStyles[theme.breakpoints.up(breakpoint)] = styles;
    }
    return globalStyles;
  }, {});
}
function generateDirection({
  theme,
  ownerState
}) {
  const directionValues = resolveBreakpointValues({
    values: ownerState.direction,
    breakpoints: theme.breakpoints.values
  });
  return handleBreakpoints({
    theme
  }, directionValues, (propValue) => {
    const output = {
      flexDirection: propValue
    };
    if (propValue.startsWith("column")) {
      output[`& > .${gridClasses_default.item}`] = {
        maxWidth: "none"
      };
    }
    return output;
  });
}
function extractZeroValueBreakpointKeys({
  breakpoints,
  values
}) {
  let nonZeroKey = "";
  Object.keys(values).forEach((key) => {
    if (nonZeroKey !== "") {
      return;
    }
    if (values[key] !== 0) {
      nonZeroKey = key;
    }
  });
  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
    return breakpoints[a] - breakpoints[b];
  });
  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
}
function generateRowGap({
  theme,
  ownerState
}) {
  const {
    container,
    rowSpacing
  } = ownerState;
  let styles = {};
  if (container && rowSpacing !== 0) {
    const rowSpacingValues = resolveBreakpointValues({
      values: rowSpacing,
      breakpoints: theme.breakpoints.values
    });
    let zeroValueBreakpointKeys;
    if (typeof rowSpacingValues === "object") {
      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
        breakpoints: theme.breakpoints.values,
        values: rowSpacingValues
      });
    }
    styles = handleBreakpoints({
      theme
    }, rowSpacingValues, (propValue, breakpoint) => {
      const themeSpacing = theme.spacing(propValue);
      if (themeSpacing !== "0px") {
        return {
          marginTop: theme.spacing(-propValue),
          [`& > .${gridClasses_default.item}`]: {
            paddingTop: themeSpacing
          }
        };
      }
      if (zeroValueBreakpointKeys == null ? void 0 : zeroValueBreakpointKeys.includes(breakpoint)) {
        return {};
      }
      return {
        marginTop: 0,
        [`& > .${gridClasses_default.item}`]: {
          paddingTop: 0
        }
      };
    });
  }
  return styles;
}
function generateColumnGap({
  theme,
  ownerState
}) {
  const {
    container,
    columnSpacing
  } = ownerState;
  let styles = {};
  if (container && columnSpacing !== 0) {
    const columnSpacingValues = resolveBreakpointValues({
      values: columnSpacing,
      breakpoints: theme.breakpoints.values
    });
    let zeroValueBreakpointKeys;
    if (typeof columnSpacingValues === "object") {
      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
        breakpoints: theme.breakpoints.values,
        values: columnSpacingValues
      });
    }
    styles = handleBreakpoints({
      theme
    }, columnSpacingValues, (propValue, breakpoint) => {
      const themeSpacing = theme.spacing(propValue);
      if (themeSpacing !== "0px") {
        const negativeValue = theme.spacing(-propValue);
        return {
          width: `calc(100% + ${themeSpacing})`,
          marginLeft: negativeValue,
          [`& > .${gridClasses_default.item}`]: {
            paddingLeft: themeSpacing
          }
        };
      }
      if (zeroValueBreakpointKeys == null ? void 0 : zeroValueBreakpointKeys.includes(breakpoint)) {
        return {};
      }
      return {
        width: "100%",
        marginLeft: 0,
        [`& > .${gridClasses_default.item}`]: {
          paddingLeft: 0
        }
      };
    });
  }
  return styles;
}
function resolveSpacingStyles(spacing, breakpoints, styles = {}) {
  if (!spacing || spacing <= 0) {
    return [];
  }
  if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
    return [styles[`spacing-xs-${String(spacing)}`]];
  }
  const spacingStyles = [];
  breakpoints.forEach((breakpoint) => {
    const value = spacing[breakpoint];
    if (Number(value) > 0) {
      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);
    }
  });
  return spacingStyles;
}
function resolveSpacingClasses(spacing, breakpoints) {
  if (!spacing || spacing <= 0) {
    return [];
  }
  if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
    return [`spacing-xs-${String(spacing)}`];
  }
  const classes = [];
  breakpoints.forEach((breakpoint) => {
    const value = spacing[breakpoint];
    if (Number(value) > 0) {
      const className = `spacing-${breakpoint}-${String(value)}`;
      classes.push(className);
    }
  });
  return classes;
}
var React16, import_prop_types11, import_jsx_runtime15, GridRoot, useUtilityClasses10, Grid, Grid_default;
var init_Grid = __esm({
  "node_modules/@mui/material/Grid/Grid.js"() {
    "use client";
    React16 = __toESM(require_react());
    import_prop_types11 = __toESM(require_prop_types());
    init_clsx();
    init_esm2();
    init_styleFunctionSx();
    init_composeClasses();
    init_requirePropFactory();
    init_styled();
    init_useThemeProps();
    init_useTheme();
    init_GridContext();
    init_gridClasses();
    import_jsx_runtime15 = __toESM(require_jsx_runtime());
    GridRoot = styled_default("div", {
      name: "MuiGrid",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        const {
          container,
          direction,
          item,
          spacing,
          wrap,
          zeroMinWidth,
          breakpoints
        } = ownerState;
        let spacingStyles = [];
        if (container) {
          spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);
        }
        const breakpointsStyles = [];
        breakpoints.forEach((breakpoint) => {
          const value = ownerState[breakpoint];
          if (value) {
            breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);
          }
        });
        return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== "row" && styles[`direction-xs-${String(direction)}`], wrap !== "wrap" && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
      }
    })(
      // FIXME(romgrk): Can't use memoTheme here
      ({
        ownerState
      }) => ({
        boxSizing: "border-box",
        ...ownerState.container && {
          display: "flex",
          flexWrap: "wrap",
          width: "100%"
        },
        ...ownerState.item && {
          margin: 0
          // For instance, it's useful when used with a `figure` element.
        },
        ...ownerState.zeroMinWidth && {
          minWidth: 0
        },
        ...ownerState.wrap !== "wrap" && {
          flexWrap: ownerState.wrap
        }
      }),
      generateDirection,
      generateRowGap,
      generateColumnGap,
      generateGrid
    );
    useUtilityClasses10 = (ownerState) => {
      const {
        classes,
        container,
        direction,
        item,
        spacing,
        wrap,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingClasses = [];
      if (container) {
        spacingClasses = resolveSpacingClasses(spacing, breakpoints);
      }
      const breakpointsClasses = [];
      breakpoints.forEach((breakpoint) => {
        const value = ownerState[breakpoint];
        if (value) {
          breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
        }
      });
      const slots = {
        root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction !== "row" && `direction-xs-${String(direction)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
      };
      return composeClasses(slots, getGridUtilityClass, classes);
    };
    Grid = React16.forwardRef(function Grid2(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiGrid"
      });
      const {
        breakpoints
      } = useTheme();
      const props = extendSxProp(themeProps);
      const {
        className,
        columns: columnsProp,
        columnSpacing: columnSpacingProp,
        component = "div",
        container = false,
        direction = "row",
        item = false,
        rowSpacing: rowSpacingProp,
        spacing = 0,
        wrap = "wrap",
        zeroMinWidth = false,
        ...other
      } = props;
      const rowSpacing = rowSpacingProp || spacing;
      const columnSpacing = columnSpacingProp || spacing;
      const columnsContext = React16.useContext(GridContext_default);
      const columns = container ? columnsProp || 12 : columnsContext;
      const breakpointsValues = {};
      const otherFiltered = {
        ...other
      };
      breakpoints.keys.forEach((breakpoint) => {
        if (other[breakpoint] != null) {
          breakpointsValues[breakpoint] = other[breakpoint];
          delete otherFiltered[breakpoint];
        }
      });
      const ownerState = {
        ...props,
        columns,
        container,
        direction,
        item,
        rowSpacing,
        columnSpacing,
        wrap,
        zeroMinWidth,
        spacing,
        ...breakpointsValues,
        breakpoints: breakpoints.keys
      };
      const classes = useUtilityClasses10(ownerState);
      return (0, import_jsx_runtime15.jsx)(GridContext_default.Provider, {
        value: columns,
        children: (0, import_jsx_runtime15.jsx)(GridRoot, {
          ownerState,
          className: clsx_default(classes.root, className),
          as: component,
          ref,
          ...otherFiltered
        })
      });
    });
    true ? Grid.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: import_prop_types11.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types11.default.object,
      /**
       * @ignore
       */
      className: import_prop_types11.default.string,
      /**
       * The number of columns.
       * @default 12
       */
      columns: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.number), import_prop_types11.default.number, import_prop_types11.default.object]),
      /**
       * Defines the horizontal space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      columnSpacing: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string])), import_prop_types11.default.number, import_prop_types11.default.object, import_prop_types11.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types11.default.elementType,
      /**
       * If `true`, the component will have the flex *container* behavior.
       * You should be wrapping *items* with a *container*.
       * @default false
       */
      container: import_prop_types11.default.bool,
      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       * @default 'row'
       */
      direction: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types11.default.arrayOf(import_prop_types11.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types11.default.object]),
      /**
       * If `true`, the component will have the flex *item* behavior.
       * You should be wrapping *items* with a *container*.
       * @default false
       */
      item: import_prop_types11.default.bool,
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `lg` breakpoint and wider screens if not overridden.
       * @default false
       */
      lg: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number, import_prop_types11.default.bool]),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `md` breakpoint and wider screens if not overridden.
       * @default false
       */
      md: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number, import_prop_types11.default.bool]),
      /**
       * Defines the vertical space between the type `item` components.
       * It overrides the value of the `spacing` prop.
       */
      rowSpacing: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string])), import_prop_types11.default.number, import_prop_types11.default.object, import_prop_types11.default.string]),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `sm` breakpoint and wider screens if not overridden.
       * @default false
       */
      sm: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number, import_prop_types11.default.bool]),
      /**
       * Defines the space between the type `item` components.
       * It can only be used on a type `container` component.
       * @default 0
       */
      spacing: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string])), import_prop_types11.default.number, import_prop_types11.default.object, import_prop_types11.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object]),
      /**
       * Defines the `flex-wrap` style property.
       * It's applied for all screen sizes.
       * @default 'wrap'
       */
      wrap: import_prop_types11.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for the `xl` breakpoint and wider screens if not overridden.
       * @default false
       */
      xl: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number, import_prop_types11.default.bool]),
      /**
       * If a number, it sets the number of columns the grid item uses.
       * It can't be greater than the total number of columns of the container (12 by default).
       * If 'auto', the grid item's width matches its content.
       * If false, the prop is ignored.
       * If true, the grid item's width grows to use the space available in the grid container.
       * The value is applied for all the screen sizes with the lowest priority.
       * @default false
       */
      xs: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number, import_prop_types11.default.bool]),
      /**
       * If `true`, it sets `min-width: 0` on the item.
       * Refer to the limitations section of the documentation to better understand the use case.
       * @default false
       */
      zeroMinWidth: import_prop_types11.default.bool
    } : void 0;
    if (true) {
      const requireProp = requirePropFactory_default("Grid", Grid);
      Grid["propTypes"] = {
        // eslint-disable-next-line react/forbid-foreign-prop-types
        ...Grid.propTypes,
        direction: requireProp("container"),
        lg: requireProp("item"),
        md: requireProp("item"),
        sm: requireProp("item"),
        spacing: requireProp("container"),
        wrap: requireProp("container"),
        xs: requireProp("item"),
        zeroMinWidth: requireProp("item")
      };
    }
    Grid_default = Grid;
  }
});

// node_modules/@mui/material/Grid/index.js
var Grid_exports = {};
__export(Grid_exports, {
  default: () => Grid_default,
  getGridUtilityClass: () => getGridUtilityClass,
  gridClasses: () => gridClasses_default
});
var init_Grid2 = __esm({
  "node_modules/@mui/material/Grid/index.js"() {
    init_Grid();
    init_gridClasses();
    init_gridClasses();
  }
});

// node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
function getListItemIconUtilityClass(slot) {
  return generateUtilityClass("MuiListItemIcon", slot);
}
var listItemIconClasses, listItemIconClasses_default;
var init_listItemIconClasses = __esm({
  "node_modules/@mui/material/ListItemIcon/listItemIconClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
    listItemIconClasses_default = listItemIconClasses;
  }
});

// node_modules/@mui/material/ListItemIcon/ListItemIcon.js
var React17, import_prop_types12, import_jsx_runtime16, useUtilityClasses11, ListItemIconRoot, ListItemIcon, ListItemIcon_default;
var init_ListItemIcon = __esm({
  "node_modules/@mui/material/ListItemIcon/ListItemIcon.js"() {
    "use client";
    React17 = __toESM(require_react());
    import_prop_types12 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_listItemIconClasses();
    init_ListContext();
    import_jsx_runtime16 = __toESM(require_jsx_runtime());
    useUtilityClasses11 = (ownerState) => {
      const {
        alignItems,
        classes
      } = ownerState;
      const slots = {
        root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
      };
      return composeClasses(slots, getListItemIconUtilityClass, classes);
    };
    ListItemIconRoot = styled_default("div", {
      name: "MuiListItemIcon",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.alignItems === "flex-start" && styles.alignItemsFlexStart];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      minWidth: 56,
      color: (theme.vars || theme).palette.action.active,
      flexShrink: 0,
      display: "inline-flex",
      variants: [{
        props: {
          alignItems: "flex-start"
        },
        style: {
          marginTop: 8
        }
      }]
    })));
    ListItemIcon = React17.forwardRef(function ListItemIcon2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiListItemIcon"
      });
      const {
        className,
        ...other
      } = props;
      const context = React17.useContext(ListContext_default);
      const ownerState = {
        ...props,
        alignItems: context.alignItems
      };
      const classes = useUtilityClasses11(ownerState);
      return (0, import_jsx_runtime16.jsx)(ListItemIconRoot, {
        className: clsx_default(classes.root, className),
        ownerState,
        ref,
        ...other
      });
    });
    true ? ListItemIcon.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component, normally `Icon`, `SvgIcon`,
       * or a `@mui/icons-material` SVG icon element.
       */
      children: import_prop_types12.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types12.default.object,
      /**
       * @ignore
       */
      className: import_prop_types12.default.string,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object])
    } : void 0;
    ListItemIcon_default = ListItemIcon;
  }
});

// node_modules/@mui/material/ListItemIcon/index.js
var init_ListItemIcon2 = __esm({
  "node_modules/@mui/material/ListItemIcon/index.js"() {
    init_ListItemIcon();
    init_listItemIconClasses();
    init_listItemIconClasses();
  }
});

// node_modules/@mui/material/ListItemText/listItemTextClasses.js
function getListItemTextUtilityClass(slot) {
  return generateUtilityClass("MuiListItemText", slot);
}
var listItemTextClasses, listItemTextClasses_default;
var init_listItemTextClasses = __esm({
  "node_modules/@mui/material/ListItemText/listItemTextClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
    listItemTextClasses_default = listItemTextClasses;
  }
});

// node_modules/@mui/material/ListItemText/ListItemText.js
var React18, import_prop_types13, import_jsx_runtime17, useUtilityClasses12, ListItemTextRoot, ListItemText, ListItemText_default;
var init_ListItemText = __esm({
  "node_modules/@mui/material/ListItemText/ListItemText.js"() {
    "use client";
    React18 = __toESM(require_react());
    import_prop_types13 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_Typography2();
    init_ListContext();
    init_zero_styled();
    init_DefaultPropsProvider();
    init_listItemTextClasses();
    import_jsx_runtime17 = __toESM(require_jsx_runtime());
    useUtilityClasses12 = (ownerState) => {
      const {
        classes,
        inset,
        primary,
        secondary,
        dense
      } = ownerState;
      const slots = {
        root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
        primary: ["primary"],
        secondary: ["secondary"]
      };
      return composeClasses(slots, getListItemTextUtilityClass, classes);
    };
    ListItemTextRoot = styled_default("div", {
      name: "MuiListItemText",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${listItemTextClasses_default.primary}`]: styles.primary
        }, {
          [`& .${listItemTextClasses_default.secondary}`]: styles.secondary
        }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
      }
    })({
      flex: "1 1 auto",
      minWidth: 0,
      marginTop: 4,
      marginBottom: 4,
      [`.${typographyClasses_default.root}:where(& .${listItemTextClasses_default.primary})`]: {
        display: "block"
      },
      [`.${typographyClasses_default.root}:where(& .${listItemTextClasses_default.secondary})`]: {
        display: "block"
      },
      variants: [{
        props: ({
          ownerState
        }) => ownerState.primary && ownerState.secondary,
        style: {
          marginTop: 6,
          marginBottom: 6
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.inset,
        style: {
          paddingLeft: 56
        }
      }]
    });
    ListItemText = React18.forwardRef(function ListItemText2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiListItemText"
      });
      const {
        children,
        className,
        disableTypography = false,
        inset = false,
        primary: primaryProp,
        primaryTypographyProps,
        secondary: secondaryProp,
        secondaryTypographyProps,
        ...other
      } = props;
      const {
        dense
      } = React18.useContext(ListContext_default);
      let primary = primaryProp != null ? primaryProp : children;
      let secondary = secondaryProp;
      const ownerState = {
        ...props,
        disableTypography,
        inset,
        primary: !!primary,
        secondary: !!secondary,
        dense
      };
      const classes = useUtilityClasses12(ownerState);
      if (primary != null && primary.type !== Typography_default && !disableTypography) {
        primary = (0, import_jsx_runtime17.jsx)(Typography_default, {
          variant: dense ? "body2" : "body1",
          className: classes.primary,
          component: (primaryTypographyProps == null ? void 0 : primaryTypographyProps.variant) ? void 0 : "span",
          ...primaryTypographyProps,
          children: primary
        });
      }
      if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
        secondary = (0, import_jsx_runtime17.jsx)(Typography_default, {
          variant: "body2",
          className: classes.secondary,
          color: "textSecondary",
          ...secondaryTypographyProps,
          children: secondary
        });
      }
      return (0, import_jsx_runtime17.jsxs)(ListItemTextRoot, {
        className: clsx_default(classes.root, className),
        ownerState,
        ref,
        ...other,
        children: [primary, secondary]
      });
    });
    true ? ListItemText.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Alias for the `primary` prop.
       */
      children: import_prop_types13.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types13.default.object,
      /**
       * @ignore
       */
      className: import_prop_types13.default.string,
      /**
       * If `true`, the children won't be wrapped by a Typography component.
       * This can be useful to render an alternative Typography variant by wrapping
       * the `children` (or `primary`) text, and optional `secondary` text
       * with the Typography component.
       * @default false
       */
      disableTypography: import_prop_types13.default.bool,
      /**
       * If `true`, the children are indented.
       * This should be used if there is no left avatar or left icon.
       * @default false
       */
      inset: import_prop_types13.default.bool,
      /**
       * The main content element.
       */
      primary: import_prop_types13.default.node,
      /**
       * These props will be forwarded to the primary typography component
       * (as long as disableTypography is not `true`).
       */
      primaryTypographyProps: import_prop_types13.default.object,
      /**
       * The secondary content element.
       */
      secondary: import_prop_types13.default.node,
      /**
       * These props will be forwarded to the secondary typography component
       * (as long as disableTypography is not `true`).
       */
      secondaryTypographyProps: import_prop_types13.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object])
    } : void 0;
    ListItemText_default = ListItemText;
  }
});

// node_modules/@mui/material/ListItemText/index.js
var ListItemText_exports = {};
__export(ListItemText_exports, {
  default: () => ListItemText_default,
  getListItemTextUtilityClass: () => getListItemTextUtilityClass,
  listItemTextClasses: () => listItemTextClasses_default
});
var init_ListItemText2 = __esm({
  "node_modules/@mui/material/ListItemText/index.js"() {
    init_ListItemText();
    init_listItemTextClasses();
    init_listItemTextClasses();
  }
});

// node_modules/@mui/material/MenuItem/menuItemClasses.js
function getMenuItemUtilityClass(slot) {
  return generateUtilityClass("MuiMenuItem", slot);
}
var menuItemClasses, menuItemClasses_default;
var init_menuItemClasses = __esm({
  "node_modules/@mui/material/MenuItem/menuItemClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
    menuItemClasses_default = menuItemClasses;
  }
});

// node_modules/@mui/material/MenuItem/MenuItem.js
var React19, import_prop_types14, import_jsx_runtime18, overridesResolver, useUtilityClasses13, MenuItemRoot, MenuItem, MenuItem_default;
var init_MenuItem = __esm({
  "node_modules/@mui/material/MenuItem/MenuItem.js"() {
    "use client";
    React19 = __toESM(require_react());
    import_prop_types14 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_colorManipulator();
    init_rootShouldForwardProp();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_ListContext();
    init_ButtonBase();
    init_useEnhancedEffect();
    init_useForkRef();
    init_Divider2();
    init_ListItemIcon2();
    init_ListItemText2();
    init_menuItemClasses();
    import_jsx_runtime18 = __toESM(require_jsx_runtime());
    overridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
    };
    useUtilityClasses13 = (ownerState) => {
      const {
        disabled,
        dense,
        divider,
        disableGutters,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
      };
      const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
      return {
        ...classes,
        ...composedClasses
      };
    };
    MenuItemRoot = styled_default(ButtonBase_default, {
      shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
      name: "MuiMenuItem",
      slot: "Root",
      overridesResolver
    })(memoTheme_default(({
      theme
    }) => ({
      ...theme.typography.body1,
      display: "flex",
      justifyContent: "flex-start",
      alignItems: "center",
      position: "relative",
      textDecoration: "none",
      minHeight: 48,
      paddingTop: 6,
      paddingBottom: 6,
      boxSizing: "border-box",
      whiteSpace: "nowrap",
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${menuItemClasses_default.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${menuItemClasses_default.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${menuItemClasses_default.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      },
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${menuItemClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& + .${dividerClasses_default.root}`]: {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(1)
      },
      [`& + .${dividerClasses_default.inset}`]: {
        marginLeft: 52
      },
      [`& .${listItemTextClasses_default.root}`]: {
        marginTop: 0,
        marginBottom: 0
      },
      [`& .${listItemTextClasses_default.inset}`]: {
        paddingLeft: 36
      },
      [`& .${listItemIconClasses_default.root}`]: {
        minWidth: 36
      },
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.disableGutters,
        style: {
          paddingLeft: 16,
          paddingRight: 16
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.divider,
        style: {
          borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
          backgroundClip: "padding-box"
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.dense,
        style: {
          [theme.breakpoints.up("sm")]: {
            minHeight: "auto"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.dense,
        style: {
          minHeight: 32,
          // https://m2.material.io/components/menus#specs > Dense
          paddingTop: 4,
          paddingBottom: 4,
          ...theme.typography.body2,
          [`& .${listItemIconClasses_default.root} svg`]: {
            fontSize: "1.25rem"
          }
        }
      }]
    })));
    MenuItem = React19.forwardRef(function MenuItem2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiMenuItem"
      });
      const {
        autoFocus = false,
        component = "li",
        dense = false,
        divider = false,
        disableGutters = false,
        focusVisibleClassName,
        role = "menuitem",
        tabIndex: tabIndexProp,
        className,
        ...other
      } = props;
      const context = React19.useContext(ListContext_default);
      const childContext = React19.useMemo(() => ({
        dense: dense || context.dense || false,
        disableGutters
      }), [context.dense, dense, disableGutters]);
      const menuItemRef = React19.useRef(null);
      useEnhancedEffect_default2(() => {
        if (autoFocus) {
          if (menuItemRef.current) {
            menuItemRef.current.focus();
          } else if (true) {
            console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
          }
        }
      }, [autoFocus]);
      const ownerState = {
        ...props,
        dense: childContext.dense,
        divider,
        disableGutters
      };
      const classes = useUtilityClasses13(props);
      const handleRef = useForkRef_default(menuItemRef, ref);
      let tabIndex;
      if (!props.disabled) {
        tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
      }
      return (0, import_jsx_runtime18.jsx)(ListContext_default.Provider, {
        value: childContext,
        children: (0, import_jsx_runtime18.jsx)(MenuItemRoot, {
          ref: handleRef,
          role,
          tabIndex,
          component,
          focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
          className: clsx_default(classes.root, className),
          ...other,
          ownerState,
          classes
        })
      });
    });
    true ? MenuItem.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the list item is focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       * @default false
       */
      autoFocus: import_prop_types14.default.bool,
      /**
       * The content of the component.
       */
      children: import_prop_types14.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types14.default.object,
      /**
       * @ignore
       */
      className: import_prop_types14.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types14.default.elementType,
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input is used.
       * The prop defaults to the value inherited from the parent Menu component.
       * @default false
       */
      dense: import_prop_types14.default.bool,
      /**
       * @ignore
       */
      disabled: import_prop_types14.default.bool,
      /**
       * If `true`, the left and right padding is removed.
       * @default false
       */
      disableGutters: import_prop_types14.default.bool,
      /**
       * If `true`, a 1px light border is added to the bottom of the menu item.
       * @default false
       */
      divider: import_prop_types14.default.bool,
      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: import_prop_types14.default.string,
      /**
       * @ignore
       */
      role: import_prop_types14.default.string,
      /**
       * If `true`, the component is selected.
       * @default false
       */
      selected: import_prop_types14.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
      /**
       * @default 0
       */
      tabIndex: import_prop_types14.default.number
    } : void 0;
    MenuItem_default = MenuItem;
  }
});

// node_modules/@mui/material/MenuItem/index.js
var MenuItem_exports = {};
__export(MenuItem_exports, {
  default: () => MenuItem_default,
  getMenuItemUtilityClass: () => getMenuItemUtilityClass,
  menuItemClasses: () => menuItemClasses_default
});
var init_MenuItem2 = __esm({
  "node_modules/@mui/material/MenuItem/index.js"() {
    init_MenuItem();
    init_menuItemClasses();
    init_menuItemClasses();
  }
});

// node_modules/@mui/material/Tooltip/tooltipClasses.js
function getTooltipUtilityClass(slot) {
  return generateUtilityClass("MuiTooltip", slot);
}
var tooltipClasses, tooltipClasses_default;
var init_tooltipClasses = __esm({
  "node_modules/@mui/material/Tooltip/tooltipClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tooltipClasses = generateUtilityClasses("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
    tooltipClasses_default = tooltipClasses;
  }
});

// node_modules/@mui/material/Tooltip/Tooltip.js
function round2(value) {
  return Math.round(value * 1e5) / 1e5;
}
function composeEventHandler(handler, eventHandler) {
  return (event, ...params) => {
    if (eventHandler) {
      eventHandler(event, ...params);
    }
    handler(event, ...params);
  };
}
var React20, import_prop_types15, import_jsx_runtime19, useUtilityClasses14, TooltipPopper, TooltipTooltip, TooltipArrow, hystersisOpen, hystersisTimer, cursorPosition, Tooltip, Tooltip_default;
var init_Tooltip = __esm({
  "node_modules/@mui/material/Tooltip/Tooltip.js"() {
    "use client";
    React20 = __toESM(require_react());
    import_prop_types15 = __toESM(require_prop_types());
    init_clsx();
    init_useTimeout();
    init_elementAcceptingRef();
    init_composeClasses();
    init_colorManipulator();
    init_RtlProvider();
    init_isFocusVisible();
    init_appendOwnerState();
    init_getReactElementRef();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_capitalize();
    init_Grow();
    init_Popper2();
    init_useEventCallback();
    init_useForkRef();
    init_useId();
    init_useControlled();
    init_tooltipClasses();
    import_jsx_runtime19 = __toESM(require_jsx_runtime());
    useUtilityClasses14 = (ownerState) => {
      const {
        classes,
        disableInteractive,
        arrow: arrow2,
        touch,
        placement
      } = ownerState;
      const slots = {
        popper: ["popper", !disableInteractive && "popperInteractive", arrow2 && "popperArrow"],
        tooltip: ["tooltip", arrow2 && "tooltipArrow", touch && "touch", `tooltipPlacement${capitalize_default(placement.split("-")[0])}`],
        arrow: ["arrow"]
      };
      return composeClasses(slots, getTooltipUtilityClass, classes);
    };
    TooltipPopper = styled_default(Popper_default, {
      name: "MuiTooltip",
      slot: "Popper",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      zIndex: (theme.vars || theme).zIndex.tooltip,
      pointerEvents: "none",
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.disableInteractive,
        style: {
          pointerEvents: "auto"
        }
      }, {
        props: ({
          open
        }) => !open,
        style: {
          pointerEvents: "none"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.arrow,
        style: {
          [`&[data-popper-placement*="bottom"] .${tooltipClasses_default.arrow}`]: {
            top: 0,
            marginTop: "-0.71em",
            "&::before": {
              transformOrigin: "0 100%"
            }
          },
          [`&[data-popper-placement*="top"] .${tooltipClasses_default.arrow}`]: {
            bottom: 0,
            marginBottom: "-0.71em",
            "&::before": {
              transformOrigin: "100% 0"
            }
          },
          [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: {
            height: "1em",
            width: "0.71em",
            "&::before": {
              transformOrigin: "100% 100%"
            }
          },
          [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: {
            height: "1em",
            width: "0.71em",
            "&::before": {
              transformOrigin: "0 0"
            }
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.arrow && !ownerState.isRtl,
        style: {
          [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: {
            left: 0,
            marginLeft: "-0.71em"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.arrow && !!ownerState.isRtl,
        style: {
          [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: {
            right: 0,
            marginRight: "-0.71em"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.arrow && !ownerState.isRtl,
        style: {
          [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: {
            right: 0,
            marginRight: "-0.71em"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.arrow && !!ownerState.isRtl,
        style: {
          [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: {
            left: 0,
            marginLeft: "-0.71em"
          }
        }
      }]
    })));
    TooltipTooltip = styled_default("div", {
      name: "MuiTooltip",
      slot: "Tooltip",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${capitalize_default(ownerState.placement.split("-")[0])}`]];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.92),
      borderRadius: (theme.vars || theme).shape.borderRadius,
      color: (theme.vars || theme).palette.common.white,
      fontFamily: theme.typography.fontFamily,
      padding: "4px 8px",
      fontSize: theme.typography.pxToRem(11),
      maxWidth: 300,
      margin: 2,
      wordWrap: "break-word",
      fontWeight: theme.typography.fontWeightMedium,
      [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: {
        transformOrigin: "right center"
      },
      [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: {
        transformOrigin: "left center"
      },
      [`.${tooltipClasses_default.popper}[data-popper-placement*="top"] &`]: {
        transformOrigin: "center bottom",
        marginBottom: "14px"
      },
      [`.${tooltipClasses_default.popper}[data-popper-placement*="bottom"] &`]: {
        transformOrigin: "center top",
        marginTop: "14px"
      },
      variants: [{
        props: ({
          ownerState
        }) => ownerState.arrow,
        style: {
          position: "relative",
          margin: 0
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.touch,
        style: {
          padding: "8px 16px",
          fontSize: theme.typography.pxToRem(14),
          lineHeight: `${round2(16 / 14)}em`,
          fontWeight: theme.typography.fontWeightRegular
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.isRtl,
        style: {
          [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: {
            marginRight: "14px"
          },
          [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: {
            marginLeft: "14px"
          }
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.isRtl && ownerState.touch,
        style: {
          [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: {
            marginRight: "24px"
          },
          [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: {
            marginLeft: "24px"
          }
        }
      }, {
        props: ({
          ownerState
        }) => !!ownerState.isRtl,
        style: {
          [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: {
            marginLeft: "14px"
          },
          [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: {
            marginRight: "14px"
          }
        }
      }, {
        props: ({
          ownerState
        }) => !!ownerState.isRtl && ownerState.touch,
        style: {
          [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: {
            marginLeft: "24px"
          },
          [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: {
            marginRight: "24px"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.touch,
        style: {
          [`.${tooltipClasses_default.popper}[data-popper-placement*="top"] &`]: {
            marginBottom: "24px"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.touch,
        style: {
          [`.${tooltipClasses_default.popper}[data-popper-placement*="bottom"] &`]: {
            marginTop: "24px"
          }
        }
      }]
    })));
    TooltipArrow = styled_default("span", {
      name: "MuiTooltip",
      slot: "Arrow",
      overridesResolver: (props, styles) => styles.arrow
    })(memoTheme_default(({
      theme
    }) => ({
      overflow: "hidden",
      position: "absolute",
      width: "1em",
      height: "0.71em",
      boxSizing: "border-box",
      color: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.9),
      "&::before": {
        content: '""',
        margin: "auto",
        display: "block",
        width: "100%",
        height: "100%",
        backgroundColor: "currentColor",
        transform: "rotate(45deg)"
      }
    })));
    hystersisOpen = false;
    hystersisTimer = new Timeout();
    cursorPosition = {
      x: 0,
      y: 0
    };
    Tooltip = React20.forwardRef(function Tooltip2(inProps, ref) {
      var _a, _b, _c;
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTooltip"
      });
      const {
        arrow: arrow2 = false,
        children: childrenProp,
        classes: classesProp,
        components = {},
        componentsProps = {},
        describeChild = false,
        disableFocusListener = false,
        disableHoverListener = false,
        disableInteractive: disableInteractiveProp = false,
        disableTouchListener = false,
        enterDelay = 100,
        enterNextDelay = 0,
        enterTouchDelay = 700,
        followCursor = false,
        id: idProp,
        leaveDelay = 0,
        leaveTouchDelay = 1500,
        onClose,
        onOpen,
        open: openProp,
        placement = "bottom",
        PopperComponent: PopperComponentProp,
        PopperProps = {},
        slotProps = {},
        slots = {},
        title,
        TransitionComponent: TransitionComponentProp = Grow_default,
        TransitionProps,
        ...other
      } = props;
      const children = React20.isValidElement(childrenProp) ? childrenProp : (0, import_jsx_runtime19.jsx)("span", {
        children: childrenProp
      });
      const theme = useTheme();
      const isRtl = useRtl();
      const [childNode, setChildNode] = React20.useState();
      const [arrowRef, setArrowRef] = React20.useState(null);
      const ignoreNonTouchEvents = React20.useRef(false);
      const disableInteractive = disableInteractiveProp || followCursor;
      const closeTimer = useTimeout();
      const enterTimer = useTimeout();
      const leaveTimer = useTimeout();
      const touchTimer = useTimeout();
      const [openState, setOpenState] = useControlled_default({
        controlled: openProp,
        default: false,
        name: "Tooltip",
        state: "open"
      });
      let open = openState;
      if (true) {
        const {
          current: isControlled
        } = React20.useRef(openProp !== void 0);
        React20.useEffect(() => {
          if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
            console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
          }
        }, [title, childNode, isControlled]);
      }
      const id = useId_default(idProp);
      const prevUserSelect = React20.useRef();
      const stopTouchInteraction = useEventCallback_default(() => {
        if (prevUserSelect.current !== void 0) {
          document.body.style.WebkitUserSelect = prevUserSelect.current;
          prevUserSelect.current = void 0;
        }
        touchTimer.clear();
      });
      React20.useEffect(() => stopTouchInteraction, [stopTouchInteraction]);
      const handleOpen = (event) => {
        hystersisTimer.clear();
        hystersisOpen = true;
        setOpenState(true);
        if (onOpen && !open) {
          onOpen(event);
        }
      };
      const handleClose = useEventCallback_default(
        /**
         * @param {React.SyntheticEvent | Event} event
         */
        (event) => {
          hystersisTimer.start(800 + leaveDelay, () => {
            hystersisOpen = false;
          });
          setOpenState(false);
          if (onClose && open) {
            onClose(event);
          }
          closeTimer.start(theme.transitions.duration.shortest, () => {
            ignoreNonTouchEvents.current = false;
          });
        }
      );
      const handleMouseOver = (event) => {
        if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
          return;
        }
        if (childNode) {
          childNode.removeAttribute("title");
        }
        enterTimer.clear();
        leaveTimer.clear();
        if (enterDelay || hystersisOpen && enterNextDelay) {
          enterTimer.start(hystersisOpen ? enterNextDelay : enterDelay, () => {
            handleOpen(event);
          });
        } else {
          handleOpen(event);
        }
      };
      const handleMouseLeave = (event) => {
        enterTimer.clear();
        leaveTimer.start(leaveDelay, () => {
          handleClose(event);
        });
      };
      const [, setChildIsFocusVisible] = React20.useState(false);
      const handleBlur = (event) => {
        if (!isFocusVisible(event.target)) {
          setChildIsFocusVisible(false);
          handleMouseLeave(event);
        }
      };
      const handleFocus = (event) => {
        if (!childNode) {
          setChildNode(event.currentTarget);
        }
        if (isFocusVisible(event.target)) {
          setChildIsFocusVisible(true);
          handleMouseOver(event);
        }
      };
      const detectTouchStart = (event) => {
        ignoreNonTouchEvents.current = true;
        const childrenProps2 = children.props;
        if (childrenProps2.onTouchStart) {
          childrenProps2.onTouchStart(event);
        }
      };
      const handleTouchStart = (event) => {
        detectTouchStart(event);
        leaveTimer.clear();
        closeTimer.clear();
        stopTouchInteraction();
        prevUserSelect.current = document.body.style.WebkitUserSelect;
        document.body.style.WebkitUserSelect = "none";
        touchTimer.start(enterTouchDelay, () => {
          document.body.style.WebkitUserSelect = prevUserSelect.current;
          handleMouseOver(event);
        });
      };
      const handleTouchEnd = (event) => {
        if (children.props.onTouchEnd) {
          children.props.onTouchEnd(event);
        }
        stopTouchInteraction();
        leaveTimer.start(leaveTouchDelay, () => {
          handleClose(event);
        });
      };
      React20.useEffect(() => {
        if (!open) {
          return void 0;
        }
        function handleKeyDown(nativeEvent) {
          if (nativeEvent.key === "Escape") {
            handleClose(nativeEvent);
          }
        }
        document.addEventListener("keydown", handleKeyDown);
        return () => {
          document.removeEventListener("keydown", handleKeyDown);
        };
      }, [handleClose, open]);
      const handleRef = useForkRef_default(getReactElementRef(children), setChildNode, ref);
      if (!title && title !== 0) {
        open = false;
      }
      const popperRef = React20.useRef();
      const handleMouseMove = (event) => {
        const childrenProps2 = children.props;
        if (childrenProps2.onMouseMove) {
          childrenProps2.onMouseMove(event);
        }
        cursorPosition = {
          x: event.clientX,
          y: event.clientY
        };
        if (popperRef.current) {
          popperRef.current.update();
        }
      };
      const nameOrDescProps = {};
      const titleIsString = typeof title === "string";
      if (describeChild) {
        nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
        nameOrDescProps["aria-describedby"] = open ? id : null;
      } else {
        nameOrDescProps["aria-label"] = titleIsString ? title : null;
        nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
      }
      const childrenProps = {
        ...nameOrDescProps,
        ...other,
        ...children.props,
        className: clsx_default(other.className, children.props.className),
        onTouchStart: detectTouchStart,
        ref: handleRef,
        ...followCursor ? {
          onMouseMove: handleMouseMove
        } : {}
      };
      if (true) {
        childrenProps["data-mui-internal-clone-element"] = true;
        React20.useEffect(() => {
          if (childNode && !childNode.getAttribute("data-mui-internal-clone-element")) {
            console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join("\n"));
          }
        }, [childNode]);
      }
      const interactiveWrapperListeners = {};
      if (!disableTouchListener) {
        childrenProps.onTouchStart = handleTouchStart;
        childrenProps.onTouchEnd = handleTouchEnd;
      }
      if (!disableHoverListener) {
        childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
        childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
        if (!disableInteractive) {
          interactiveWrapperListeners.onMouseOver = handleMouseOver;
          interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
        }
      }
      if (!disableFocusListener) {
        childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
        childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
        if (!disableInteractive) {
          interactiveWrapperListeners.onFocus = handleFocus;
          interactiveWrapperListeners.onBlur = handleBlur;
        }
      }
      if (true) {
        if (children.props.title) {
          console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join("\n"));
        }
      }
      const popperOptions = React20.useMemo(() => {
        var _a2;
        let tooltipModifiers = [{
          name: "arrow",
          enabled: Boolean(arrowRef),
          options: {
            element: arrowRef,
            padding: 4
          }
        }];
        if ((_a2 = PopperProps.popperOptions) == null ? void 0 : _a2.modifiers) {
          tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
        }
        return {
          ...PopperProps.popperOptions,
          modifiers: tooltipModifiers
        };
      }, [arrowRef, PopperProps]);
      const ownerState = {
        ...props,
        isRtl,
        arrow: arrow2,
        disableInteractive,
        placement,
        PopperComponentProp,
        touch: ignoreNonTouchEvents.current
      };
      const classes = useUtilityClasses14(ownerState);
      const PopperComponent = slots.popper ?? components.Popper ?? TooltipPopper;
      const TransitionComponent = slots.transition ?? components.Transition ?? TransitionComponentProp ?? Grow_default;
      const TooltipComponent = slots.tooltip ?? components.Tooltip ?? TooltipTooltip;
      const ArrowComponent = slots.arrow ?? components.Arrow ?? TooltipArrow;
      const popperProps = appendOwnerState_default(PopperComponent, {
        ...PopperProps,
        ...slotProps.popper ?? componentsProps.popper,
        className: clsx_default(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_a = slotProps.popper ?? componentsProps.popper) == null ? void 0 : _a.className)
      }, ownerState);
      const transitionProps = appendOwnerState_default(TransitionComponent, {
        ...TransitionProps,
        ...slotProps.transition ?? componentsProps.transition
      }, ownerState);
      const tooltipProps = appendOwnerState_default(TooltipComponent, {
        ...slotProps.tooltip ?? componentsProps.tooltip,
        className: clsx_default(classes.tooltip, (_b = slotProps.tooltip ?? componentsProps.tooltip) == null ? void 0 : _b.className)
      }, ownerState);
      const tooltipArrowProps = appendOwnerState_default(ArrowComponent, {
        ...slotProps.arrow ?? componentsProps.arrow,
        className: clsx_default(classes.arrow, (_c = slotProps.arrow ?? componentsProps.arrow) == null ? void 0 : _c.className)
      }, ownerState);
      return (0, import_jsx_runtime19.jsxs)(React20.Fragment, {
        children: [React20.cloneElement(children, childrenProps), (0, import_jsx_runtime19.jsx)(PopperComponent, {
          as: PopperComponentProp ?? Popper_default,
          placement,
          anchorEl: followCursor ? {
            getBoundingClientRect: () => ({
              top: cursorPosition.y,
              left: cursorPosition.x,
              right: cursorPosition.x,
              bottom: cursorPosition.y,
              width: 0,
              height: 0
            })
          } : childNode,
          popperRef,
          open: childNode ? open : false,
          id,
          transition: true,
          ...interactiveWrapperListeners,
          ...popperProps,
          popperOptions,
          children: ({
            TransitionProps: TransitionPropsInner
          }) => (0, import_jsx_runtime19.jsx)(TransitionComponent, {
            timeout: theme.transitions.duration.shorter,
            ...TransitionPropsInner,
            ...transitionProps,
            children: (0, import_jsx_runtime19.jsxs)(TooltipComponent, {
              ...tooltipProps,
              children: [title, arrow2 ? (0, import_jsx_runtime19.jsx)(ArrowComponent, {
                ...tooltipArrowProps,
                ref: setArrowRef
              }) : null]
            })
          })
        })]
      });
    });
    true ? Tooltip.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, adds an arrow to the tooltip.
       * @default false
       */
      arrow: import_prop_types15.default.bool,
      /**
       * Tooltip reference element.
       */
      children: elementAcceptingRef_default.isRequired,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types15.default.object,
      /**
       * @ignore
       */
      className: import_prop_types15.default.string,
      /**
       * The components used for each slot inside.
       *
       * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/).
       *
       * @default {}
       */
      components: import_prop_types15.default.shape({
        Arrow: import_prop_types15.default.elementType,
        Popper: import_prop_types15.default.elementType,
        Tooltip: import_prop_types15.default.elementType,
        Transition: import_prop_types15.default.elementType
      }),
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/).
       *
       * @default {}
       */
      componentsProps: import_prop_types15.default.shape({
        arrow: import_prop_types15.default.object,
        popper: import_prop_types15.default.object,
        tooltip: import_prop_types15.default.object,
        transition: import_prop_types15.default.object
      }),
      /**
       * Set to `true` if the `title` acts as an accessible description.
       * By default the `title` acts as an accessible label for the child.
       * @default false
       */
      describeChild: import_prop_types15.default.bool,
      /**
       * Do not respond to focus-visible events.
       * @default false
       */
      disableFocusListener: import_prop_types15.default.bool,
      /**
       * Do not respond to hover events.
       * @default false
       */
      disableHoverListener: import_prop_types15.default.bool,
      /**
       * Makes a tooltip not interactive, i.e. it will close when the user
       * hovers over the tooltip before the `leaveDelay` is expired.
       * @default false
       */
      disableInteractive: import_prop_types15.default.bool,
      /**
       * Do not respond to long press touch events.
       * @default false
       */
      disableTouchListener: import_prop_types15.default.bool,
      /**
       * The number of milliseconds to wait before showing the tooltip.
       * This prop won't impact the enter touch delay (`enterTouchDelay`).
       * @default 100
       */
      enterDelay: import_prop_types15.default.number,
      /**
       * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
       * @default 0
       */
      enterNextDelay: import_prop_types15.default.number,
      /**
       * The number of milliseconds a user must touch the element before showing the tooltip.
       * @default 700
       */
      enterTouchDelay: import_prop_types15.default.number,
      /**
       * If `true`, the tooltip follow the cursor over the wrapped element.
       * @default false
       */
      followCursor: import_prop_types15.default.bool,
      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide this prop. It falls back to a randomly generated id.
       */
      id: import_prop_types15.default.string,
      /**
       * The number of milliseconds to wait before hiding the tooltip.
       * This prop won't impact the leave touch delay (`leaveTouchDelay`).
       * @default 0
       */
      leaveDelay: import_prop_types15.default.number,
      /**
       * The number of milliseconds after the user stops touching an element before hiding the tooltip.
       * @default 1500
       */
      leaveTouchDelay: import_prop_types15.default.number,
      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       */
      onClose: import_prop_types15.default.func,
      /**
       * Callback fired when the component requests to be open.
       *
       * @param {React.SyntheticEvent} event The event source of the callback.
       */
      onOpen: import_prop_types15.default.func,
      /**
       * If `true`, the component is shown.
       */
      open: import_prop_types15.default.bool,
      /**
       * Tooltip placement.
       * @default 'bottom'
       */
      placement: import_prop_types15.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      /**
       * The component used for the popper.
       * @default Popper
       */
      PopperComponent: import_prop_types15.default.elementType,
      /**
       * Props applied to the [`Popper`](https://mui.com/material-ui/api/popper/) element.
       * @default {}
       */
      PopperProps: import_prop_types15.default.object,
      /**
       * The extra props for the slot components.
       * You can override the existing props or add new ones.
       *
       * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slotProps: import_prop_types15.default.shape({
        arrow: import_prop_types15.default.object,
        popper: import_prop_types15.default.object,
        tooltip: import_prop_types15.default.object,
        transition: import_prop_types15.default.object
      }),
      /**
       * The components used for each slot inside.
       *
       * This prop is an alias for the `components` prop, which will be deprecated in the future.
       *
       * @default {}
       */
      slots: import_prop_types15.default.shape({
        arrow: import_prop_types15.default.elementType,
        popper: import_prop_types15.default.elementType,
        tooltip: import_prop_types15.default.elementType,
        transition: import_prop_types15.default.elementType
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object]),
      /**
       * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
       */
      title: import_prop_types15.default.node,
      /**
       * The component used for the transition.
       * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       * @default Grow
       */
      TransitionComponent: import_prop_types15.default.elementType,
      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
       */
      TransitionProps: import_prop_types15.default.object
    } : void 0;
    Tooltip_default = Tooltip;
  }
});

// node_modules/@mui/material/Tooltip/index.js
var Tooltip_exports = {};
__export(Tooltip_exports, {
  default: () => Tooltip_default,
  getTooltipUtilityClass: () => getTooltipUtilityClass,
  tooltipClasses: () => tooltipClasses_default
});
var init_Tooltip2 = __esm({
  "node_modules/@mui/material/Tooltip/index.js"() {
    init_Tooltip();
    init_tooltipClasses();
    init_tooltipClasses();
  }
});

// node_modules/@mui/material/Table/tableClasses.js
function getTableUtilityClass(slot) {
  return generateUtilityClass("MuiTable", slot);
}
var tableClasses, tableClasses_default;
var init_tableClasses = __esm({
  "node_modules/@mui/material/Table/tableClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tableClasses = generateUtilityClasses("MuiTable", ["root", "stickyHeader"]);
    tableClasses_default = tableClasses;
  }
});

// node_modules/@mui/material/Table/TableContext.js
var React21, TableContext, TableContext_default;
var init_TableContext = __esm({
  "node_modules/@mui/material/Table/TableContext.js"() {
    "use client";
    React21 = __toESM(require_react());
    TableContext = React21.createContext();
    if (true) {
      TableContext.displayName = "TableContext";
    }
    TableContext_default = TableContext;
  }
});

// node_modules/@mui/material/Table/Table.js
var React22, import_prop_types16, import_jsx_runtime20, useUtilityClasses15, TableRoot, defaultComponent, Table, Table_default;
var init_Table = __esm({
  "node_modules/@mui/material/Table/Table.js"() {
    "use client";
    React22 = __toESM(require_react());
    import_prop_types16 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_TableContext();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_tableClasses();
    import_jsx_runtime20 = __toESM(require_jsx_runtime());
    useUtilityClasses15 = (ownerState) => {
      const {
        classes,
        stickyHeader
      } = ownerState;
      const slots = {
        root: ["root", stickyHeader && "stickyHeader"]
      };
      return composeClasses(slots, getTableUtilityClass, classes);
    };
    TableRoot = styled_default("table", {
      name: "MuiTable",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.stickyHeader && styles.stickyHeader];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      display: "table",
      width: "100%",
      borderCollapse: "collapse",
      borderSpacing: 0,
      "& caption": {
        ...theme.typography.body2,
        padding: theme.spacing(2),
        color: (theme.vars || theme).palette.text.secondary,
        textAlign: "left",
        captionSide: "bottom"
      },
      variants: [{
        props: ({
          ownerState
        }) => ownerState.stickyHeader,
        style: {
          borderCollapse: "separate"
        }
      }]
    })));
    defaultComponent = "table";
    Table = React22.forwardRef(function Table2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTable"
      });
      const {
        className,
        component = defaultComponent,
        padding = "normal",
        size = "medium",
        stickyHeader = false,
        ...other
      } = props;
      const ownerState = {
        ...props,
        component,
        padding,
        size,
        stickyHeader
      };
      const classes = useUtilityClasses15(ownerState);
      const table = React22.useMemo(() => ({
        padding,
        size,
        stickyHeader
      }), [padding, size, stickyHeader]);
      return (0, import_jsx_runtime20.jsx)(TableContext_default.Provider, {
        value: table,
        children: (0, import_jsx_runtime20.jsx)(TableRoot, {
          as: component,
          role: component === defaultComponent ? null : "table",
          ref,
          className: clsx_default(classes.root, className),
          ownerState,
          ...other
        })
      });
    });
    true ? Table.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the table, normally `TableHead` and `TableBody`.
       */
      children: import_prop_types16.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types16.default.object,
      /**
       * @ignore
       */
      className: import_prop_types16.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types16.default.elementType,
      /**
       * Allows TableCells to inherit padding of the Table.
       * @default 'normal'
       */
      padding: import_prop_types16.default.oneOf(["checkbox", "none", "normal"]),
      /**
       * Allows TableCells to inherit size of the Table.
       * @default 'medium'
       */
      size: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["medium", "small"]), import_prop_types16.default.string]),
      /**
       * Set the header sticky.
       * @default false
       */
      stickyHeader: import_prop_types16.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object])
    } : void 0;
    Table_default = Table;
  }
});

// node_modules/@mui/material/Table/index.js
var Table_exports = {};
__export(Table_exports, {
  default: () => Table_default,
  getTableUtilityClass: () => getTableUtilityClass,
  tableClasses: () => tableClasses_default
});
var init_Table2 = __esm({
  "node_modules/@mui/material/Table/index.js"() {
    init_Table();
    init_tableClasses();
    init_tableClasses();
  }
});

// node_modules/@mui/material/TableBody/tableBodyClasses.js
function getTableBodyUtilityClass(slot) {
  return generateUtilityClass("MuiTableBody", slot);
}
var tableBodyClasses, tableBodyClasses_default;
var init_tableBodyClasses = __esm({
  "node_modules/@mui/material/TableBody/tableBodyClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tableBodyClasses = generateUtilityClasses("MuiTableBody", ["root"]);
    tableBodyClasses_default = tableBodyClasses;
  }
});

// node_modules/@mui/material/Table/Tablelvl2Context.js
var React23, Tablelvl2Context, Tablelvl2Context_default;
var init_Tablelvl2Context = __esm({
  "node_modules/@mui/material/Table/Tablelvl2Context.js"() {
    React23 = __toESM(require_react());
    Tablelvl2Context = React23.createContext();
    if (true) {
      Tablelvl2Context.displayName = "Tablelvl2Context";
    }
    Tablelvl2Context_default = Tablelvl2Context;
  }
});

// node_modules/@mui/material/TableBody/TableBody.js
var React24, import_prop_types17, import_jsx_runtime21, useUtilityClasses16, TableBodyRoot, tablelvl2, defaultComponent2, TableBody, TableBody_default;
var init_TableBody = __esm({
  "node_modules/@mui/material/TableBody/TableBody.js"() {
    "use client";
    React24 = __toESM(require_react());
    import_prop_types17 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_Tablelvl2Context();
    init_zero_styled();
    init_DefaultPropsProvider();
    init_tableBodyClasses();
    import_jsx_runtime21 = __toESM(require_jsx_runtime());
    useUtilityClasses16 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getTableBodyUtilityClass, classes);
    };
    TableBodyRoot = styled_default("tbody", {
      name: "MuiTableBody",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({
      display: "table-row-group"
    });
    tablelvl2 = {
      variant: "body"
    };
    defaultComponent2 = "tbody";
    TableBody = React24.forwardRef(function TableBody2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTableBody"
      });
      const {
        className,
        component = defaultComponent2,
        ...other
      } = props;
      const ownerState = {
        ...props,
        component
      };
      const classes = useUtilityClasses16(ownerState);
      return (0, import_jsx_runtime21.jsx)(Tablelvl2Context_default.Provider, {
        value: tablelvl2,
        children: (0, import_jsx_runtime21.jsx)(TableBodyRoot, {
          className: clsx_default(classes.root, className),
          as: component,
          ref,
          role: component === defaultComponent2 ? null : "rowgroup",
          ownerState,
          ...other
        })
      });
    });
    true ? TableBody.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component, normally `TableRow`.
       */
      children: import_prop_types17.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types17.default.object,
      /**
       * @ignore
       */
      className: import_prop_types17.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types17.default.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
    } : void 0;
    TableBody_default = TableBody;
  }
});

// node_modules/@mui/material/TableBody/index.js
var TableBody_exports = {};
__export(TableBody_exports, {
  default: () => TableBody_default,
  getTableBodyUtilityClass: () => getTableBodyUtilityClass,
  tableBodyClasses: () => tableBodyClasses_default
});
var init_TableBody2 = __esm({
  "node_modules/@mui/material/TableBody/index.js"() {
    init_TableBody();
    init_tableBodyClasses();
    init_tableBodyClasses();
  }
});

// node_modules/@mui/material/TableCell/tableCellClasses.js
function getTableCellUtilityClass(slot) {
  return generateUtilityClass("MuiTableCell", slot);
}
var tableCellClasses, tableCellClasses_default;
var init_tableCellClasses = __esm({
  "node_modules/@mui/material/TableCell/tableCellClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tableCellClasses = generateUtilityClasses("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
    tableCellClasses_default = tableCellClasses;
  }
});

// node_modules/@mui/material/TableCell/TableCell.js
var React25, import_prop_types18, import_jsx_runtime22, useUtilityClasses17, TableCellRoot, TableCell, TableCell_default;
var init_TableCell = __esm({
  "node_modules/@mui/material/TableCell/TableCell.js"() {
    "use client";
    React25 = __toESM(require_react());
    import_prop_types18 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_colorManipulator();
    init_capitalize();
    init_TableContext();
    init_Tablelvl2Context();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_tableCellClasses();
    import_jsx_runtime22 = __toESM(require_jsx_runtime());
    useUtilityClasses17 = (ownerState) => {
      const {
        classes,
        variant,
        align,
        padding,
        size,
        stickyHeader
      } = ownerState;
      const slots = {
        root: ["root", variant, stickyHeader && "stickyHeader", align !== "inherit" && `align${capitalize_default(align)}`, padding !== "normal" && `padding${capitalize_default(padding)}`, `size${capitalize_default(size)}`]
      };
      return composeClasses(slots, getTableCellUtilityClass, classes);
    };
    TableCellRoot = styled_default("td", {
      name: "MuiTableCell",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], styles[`size${capitalize_default(ownerState.size)}`], ownerState.padding !== "normal" && styles[`padding${capitalize_default(ownerState.padding)}`], ownerState.align !== "inherit" && styles[`align${capitalize_default(ownerState.align)}`], ownerState.stickyHeader && styles.stickyHeader];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      ...theme.typography.body2,
      display: "table-cell",
      verticalAlign: "inherit",
      // Workaround for a rendering bug with spanned columns in Chrome 62.0.
      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
      borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
      textAlign: "left",
      padding: 16,
      variants: [{
        props: {
          variant: "head"
        },
        style: {
          color: (theme.vars || theme).palette.text.primary,
          lineHeight: theme.typography.pxToRem(24),
          fontWeight: theme.typography.fontWeightMedium
        }
      }, {
        props: {
          variant: "body"
        },
        style: {
          color: (theme.vars || theme).palette.text.primary
        }
      }, {
        props: {
          variant: "footer"
        },
        style: {
          color: (theme.vars || theme).palette.text.secondary,
          lineHeight: theme.typography.pxToRem(21),
          fontSize: theme.typography.pxToRem(12)
        }
      }, {
        props: {
          size: "small"
        },
        style: {
          padding: "6px 16px",
          [`&.${tableCellClasses_default.paddingCheckbox}`]: {
            width: 24,
            // prevent the checkbox column from growing
            padding: "0 12px 0 16px",
            "& > *": {
              padding: 0
            }
          }
        }
      }, {
        props: {
          padding: "checkbox"
        },
        style: {
          width: 48,
          // prevent the checkbox column from growing
          padding: "0 0 0 4px"
        }
      }, {
        props: {
          padding: "none"
        },
        style: {
          padding: 0
        }
      }, {
        props: {
          align: "left"
        },
        style: {
          textAlign: "left"
        }
      }, {
        props: {
          align: "center"
        },
        style: {
          textAlign: "center"
        }
      }, {
        props: {
          align: "right"
        },
        style: {
          textAlign: "right",
          flexDirection: "row-reverse"
        }
      }, {
        props: {
          align: "justify"
        },
        style: {
          textAlign: "justify"
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.stickyHeader,
        style: {
          position: "sticky",
          top: 0,
          zIndex: 2,
          backgroundColor: (theme.vars || theme).palette.background.default
        }
      }]
    })));
    TableCell = React25.forwardRef(function TableCell2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTableCell"
      });
      const {
        align = "inherit",
        className,
        component: componentProp,
        padding: paddingProp,
        scope: scopeProp,
        size: sizeProp,
        sortDirection,
        variant: variantProp,
        ...other
      } = props;
      const table = React25.useContext(TableContext_default);
      const tablelvl24 = React25.useContext(Tablelvl2Context_default);
      const isHeadCell = tablelvl24 && tablelvl24.variant === "head";
      let component;
      if (componentProp) {
        component = componentProp;
      } else {
        component = isHeadCell ? "th" : "td";
      }
      let scope = scopeProp;
      if (component === "td") {
        scope = void 0;
      } else if (!scope && isHeadCell) {
        scope = "col";
      }
      const variant = variantProp || tablelvl24 && tablelvl24.variant;
      const ownerState = {
        ...props,
        align,
        component,
        padding: paddingProp || (table && table.padding ? table.padding : "normal"),
        size: sizeProp || (table && table.size ? table.size : "medium"),
        sortDirection,
        stickyHeader: variant === "head" && table && table.stickyHeader,
        variant
      };
      const classes = useUtilityClasses17(ownerState);
      let ariaSort = null;
      if (sortDirection) {
        ariaSort = sortDirection === "asc" ? "ascending" : "descending";
      }
      return (0, import_jsx_runtime22.jsx)(TableCellRoot, {
        as: component,
        ref,
        className: clsx_default(classes.root, className),
        "aria-sort": ariaSort,
        scope,
        ownerState,
        ...other
      });
    });
    true ? TableCell.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Set the text-align on the table cell content.
       *
       * Monetary or generally number fields **should be right aligned** as that allows
       * you to add them up quickly in your head without having to worry about decimals.
       * @default 'inherit'
       */
      align: import_prop_types18.default.oneOf(["center", "inherit", "justify", "left", "right"]),
      /**
       * The content of the component.
       */
      children: import_prop_types18.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types18.default.object,
      /**
       * @ignore
       */
      className: import_prop_types18.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types18.default.elementType,
      /**
       * Sets the padding applied to the cell.
       * The prop defaults to the value (`'default'`) inherited from the parent Table component.
       */
      padding: import_prop_types18.default.oneOf(["checkbox", "none", "normal"]),
      /**
       * Set scope attribute.
       */
      scope: import_prop_types18.default.string,
      /**
       * Specify the size of the cell.
       * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
       */
      size: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["medium", "small"]), import_prop_types18.default.string]),
      /**
       * Set aria-sort direction.
       */
      sortDirection: import_prop_types18.default.oneOf(["asc", "desc", false]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
      /**
       * Specify the cell type.
       * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
       */
      variant: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["body", "footer", "head"]), import_prop_types18.default.string])
    } : void 0;
    TableCell_default = TableCell;
  }
});

// node_modules/@mui/material/TableCell/index.js
var TableCell_exports = {};
__export(TableCell_exports, {
  default: () => TableCell_default,
  getTableCellUtilityClass: () => getTableCellUtilityClass,
  tableCellClasses: () => tableCellClasses_default
});
var init_TableCell2 = __esm({
  "node_modules/@mui/material/TableCell/index.js"() {
    init_TableCell();
    init_tableCellClasses();
    init_tableCellClasses();
  }
});

// node_modules/@mui/material/TableFooter/tableFooterClasses.js
function getTableFooterUtilityClass(slot) {
  return generateUtilityClass("MuiTableFooter", slot);
}
var tableFooterClasses, tableFooterClasses_default;
var init_tableFooterClasses = __esm({
  "node_modules/@mui/material/TableFooter/tableFooterClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tableFooterClasses = generateUtilityClasses("MuiTableFooter", ["root"]);
    tableFooterClasses_default = tableFooterClasses;
  }
});

// node_modules/@mui/material/TableFooter/TableFooter.js
var React26, import_prop_types19, import_jsx_runtime23, useUtilityClasses18, TableFooterRoot, tablelvl22, defaultComponent3, TableFooter, TableFooter_default;
var init_TableFooter = __esm({
  "node_modules/@mui/material/TableFooter/TableFooter.js"() {
    "use client";
    React26 = __toESM(require_react());
    import_prop_types19 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_Tablelvl2Context();
    init_zero_styled();
    init_DefaultPropsProvider();
    init_tableFooterClasses();
    import_jsx_runtime23 = __toESM(require_jsx_runtime());
    useUtilityClasses18 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getTableFooterUtilityClass, classes);
    };
    TableFooterRoot = styled_default("tfoot", {
      name: "MuiTableFooter",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({
      display: "table-footer-group"
    });
    tablelvl22 = {
      variant: "footer"
    };
    defaultComponent3 = "tfoot";
    TableFooter = React26.forwardRef(function TableFooter2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTableFooter"
      });
      const {
        className,
        component = defaultComponent3,
        ...other
      } = props;
      const ownerState = {
        ...props,
        component
      };
      const classes = useUtilityClasses18(ownerState);
      return (0, import_jsx_runtime23.jsx)(Tablelvl2Context_default.Provider, {
        value: tablelvl22,
        children: (0, import_jsx_runtime23.jsx)(TableFooterRoot, {
          as: component,
          className: clsx_default(classes.root, className),
          ref,
          role: component === defaultComponent3 ? null : "rowgroup",
          ownerState,
          ...other
        })
      });
    });
    true ? TableFooter.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component, normally `TableRow`.
       */
      children: import_prop_types19.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types19.default.object,
      /**
       * @ignore
       */
      className: import_prop_types19.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types19.default.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object])
    } : void 0;
    TableFooter_default = TableFooter;
  }
});

// node_modules/@mui/material/TableFooter/index.js
var TableFooter_exports = {};
__export(TableFooter_exports, {
  default: () => TableFooter_default,
  getTableFooterUtilityClass: () => getTableFooterUtilityClass,
  tableFooterClasses: () => tableFooterClasses_default
});
var init_TableFooter2 = __esm({
  "node_modules/@mui/material/TableFooter/index.js"() {
    init_TableFooter();
    init_tableFooterClasses();
    init_tableFooterClasses();
  }
});

// node_modules/@mui/material/TableHead/tableHeadClasses.js
function getTableHeadUtilityClass(slot) {
  return generateUtilityClass("MuiTableHead", slot);
}
var tableHeadClasses, tableHeadClasses_default;
var init_tableHeadClasses = __esm({
  "node_modules/@mui/material/TableHead/tableHeadClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tableHeadClasses = generateUtilityClasses("MuiTableHead", ["root"]);
    tableHeadClasses_default = tableHeadClasses;
  }
});

// node_modules/@mui/material/TableHead/TableHead.js
var React27, import_prop_types20, import_jsx_runtime24, useUtilityClasses19, TableHeadRoot, tablelvl23, defaultComponent4, TableHead, TableHead_default;
var init_TableHead = __esm({
  "node_modules/@mui/material/TableHead/TableHead.js"() {
    "use client";
    React27 = __toESM(require_react());
    import_prop_types20 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_Tablelvl2Context();
    init_zero_styled();
    init_DefaultPropsProvider();
    init_tableHeadClasses();
    import_jsx_runtime24 = __toESM(require_jsx_runtime());
    useUtilityClasses19 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getTableHeadUtilityClass, classes);
    };
    TableHeadRoot = styled_default("thead", {
      name: "MuiTableHead",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })({
      display: "table-header-group"
    });
    tablelvl23 = {
      variant: "head"
    };
    defaultComponent4 = "thead";
    TableHead = React27.forwardRef(function TableHead2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTableHead"
      });
      const {
        className,
        component = defaultComponent4,
        ...other
      } = props;
      const ownerState = {
        ...props,
        component
      };
      const classes = useUtilityClasses19(ownerState);
      return (0, import_jsx_runtime24.jsx)(Tablelvl2Context_default.Provider, {
        value: tablelvl23,
        children: (0, import_jsx_runtime24.jsx)(TableHeadRoot, {
          as: component,
          className: clsx_default(classes.root, className),
          ref,
          role: component === defaultComponent4 ? null : "rowgroup",
          ownerState,
          ...other
        })
      });
    });
    true ? TableHead.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component, normally `TableRow`.
       */
      children: import_prop_types20.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types20.default.object,
      /**
       * @ignore
       */
      className: import_prop_types20.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types20.default.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object])
    } : void 0;
    TableHead_default = TableHead;
  }
});

// node_modules/@mui/material/TableHead/index.js
var TableHead_exports = {};
__export(TableHead_exports, {
  default: () => TableHead_default,
  getTableHeadUtilityClass: () => getTableHeadUtilityClass,
  tableHeadClasses: () => tableHeadClasses_default
});
var init_TableHead2 = __esm({
  "node_modules/@mui/material/TableHead/index.js"() {
    init_TableHead();
    init_tableHeadClasses();
    init_tableHeadClasses();
  }
});

// node_modules/@mui/material/Toolbar/toolbarClasses.js
function getToolbarUtilityClass(slot) {
  return generateUtilityClass("MuiToolbar", slot);
}
var toolbarClasses, toolbarClasses_default;
var init_toolbarClasses = __esm({
  "node_modules/@mui/material/Toolbar/toolbarClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    toolbarClasses = generateUtilityClasses("MuiToolbar", ["root", "gutters", "regular", "dense"]);
    toolbarClasses_default = toolbarClasses;
  }
});

// node_modules/@mui/material/Toolbar/Toolbar.js
var React28, import_prop_types21, import_jsx_runtime25, useUtilityClasses20, ToolbarRoot, Toolbar, Toolbar_default;
var init_Toolbar = __esm({
  "node_modules/@mui/material/Toolbar/Toolbar.js"() {
    "use client";
    React28 = __toESM(require_react());
    import_prop_types21 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_toolbarClasses();
    import_jsx_runtime25 = __toESM(require_jsx_runtime());
    useUtilityClasses20 = (ownerState) => {
      const {
        classes,
        disableGutters,
        variant
      } = ownerState;
      const slots = {
        root: ["root", !disableGutters && "gutters", variant]
      };
      return composeClasses(slots, getToolbarUtilityClass, classes);
    };
    ToolbarRoot = styled_default("div", {
      name: "MuiToolbar",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      position: "relative",
      display: "flex",
      alignItems: "center",
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.disableGutters,
        style: {
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2),
          [theme.breakpoints.up("sm")]: {
            paddingLeft: theme.spacing(3),
            paddingRight: theme.spacing(3)
          }
        }
      }, {
        props: {
          variant: "dense"
        },
        style: {
          minHeight: 48
        }
      }, {
        props: {
          variant: "regular"
        },
        style: theme.mixins.toolbar
      }]
    })));
    Toolbar = React28.forwardRef(function Toolbar2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiToolbar"
      });
      const {
        className,
        component = "div",
        disableGutters = false,
        variant = "regular",
        ...other
      } = props;
      const ownerState = {
        ...props,
        component,
        disableGutters,
        variant
      };
      const classes = useUtilityClasses20(ownerState);
      return (0, import_jsx_runtime25.jsx)(ToolbarRoot, {
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        ownerState,
        ...other
      });
    });
    true ? Toolbar.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
       * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
       */
      children: import_prop_types21.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types21.default.object,
      /**
       * @ignore
       */
      className: import_prop_types21.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types21.default.elementType,
      /**
       * If `true`, disables gutter padding.
       * @default false
       */
      disableGutters: import_prop_types21.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object]),
      /**
       * The variant to use.
       * @default 'regular'
       */
      variant: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["dense", "regular"]), import_prop_types21.default.string])
    } : void 0;
    Toolbar_default = Toolbar;
  }
});

// node_modules/@mui/material/Toolbar/index.js
var Toolbar_exports = {};
__export(Toolbar_exports, {
  default: () => Toolbar_default,
  getToolbarUtilityClass: () => getToolbarUtilityClass,
  toolbarClasses: () => toolbarClasses_default
});
var init_Toolbar2 = __esm({
  "node_modules/@mui/material/Toolbar/index.js"() {
    init_Toolbar();
    init_toolbarClasses();
    init_toolbarClasses();
  }
});

// node_modules/@mui/material/TablePagination/tablePaginationClasses.js
function getTablePaginationUtilityClass(slot) {
  return generateUtilityClass("MuiTablePagination", slot);
}
var tablePaginationClasses, tablePaginationClasses_default;
var init_tablePaginationClasses = __esm({
  "node_modules/@mui/material/TablePagination/tablePaginationClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tablePaginationClasses = generateUtilityClasses("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
    tablePaginationClasses_default = tablePaginationClasses;
  }
});

// node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js
var React29, import_jsx_runtime26, KeyboardArrowLeft_default;
var init_KeyboardArrowLeft = __esm({
  "node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js"() {
    "use client";
    React29 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime26 = __toESM(require_jsx_runtime());
    KeyboardArrowLeft_default = createSvgIcon((0, import_jsx_runtime26.jsx)("path", {
      d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
    }), "KeyboardArrowLeft");
  }
});

// node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js
var React30, import_jsx_runtime27, KeyboardArrowRight_default;
var init_KeyboardArrowRight = __esm({
  "node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js"() {
    "use client";
    React30 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime27 = __toESM(require_jsx_runtime());
    KeyboardArrowRight_default = createSvgIcon((0, import_jsx_runtime27.jsx)("path", {
      d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
    }), "KeyboardArrowRight");
  }
});

// node_modules/@mui/material/internal/svg-icons/LastPage.js
var React31, import_jsx_runtime28, LastPage_default;
var init_LastPage = __esm({
  "node_modules/@mui/material/internal/svg-icons/LastPage.js"() {
    "use client";
    React31 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime28 = __toESM(require_jsx_runtime());
    LastPage_default = createSvgIcon((0, import_jsx_runtime28.jsx)("path", {
      d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
    }), "LastPage");
  }
});

// node_modules/@mui/material/internal/svg-icons/FirstPage.js
var React32, import_jsx_runtime29, FirstPage_default;
var init_FirstPage = __esm({
  "node_modules/@mui/material/internal/svg-icons/FirstPage.js"() {
    "use client";
    React32 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime29 = __toESM(require_jsx_runtime());
    FirstPage_default = createSvgIcon((0, import_jsx_runtime29.jsx)("path", {
      d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
    }), "FirstPage");
  }
});

// node_modules/@mui/material/TablePagination/TablePaginationActions.js
var React33, import_prop_types22, import_jsx_runtime30, TablePaginationActions, TablePaginationActions_default;
var init_TablePaginationActions = __esm({
  "node_modules/@mui/material/TablePagination/TablePaginationActions.js"() {
    "use client";
    React33 = __toESM(require_react());
    import_prop_types22 = __toESM(require_prop_types());
    init_RtlProvider();
    init_KeyboardArrowLeft();
    init_KeyboardArrowRight();
    init_IconButton2();
    init_LastPage();
    init_FirstPage();
    import_jsx_runtime30 = __toESM(require_jsx_runtime());
    TablePaginationActions = React33.forwardRef(function TablePaginationActions2(props, ref) {
      const {
        backIconButtonProps,
        count,
        disabled = false,
        getItemAriaLabel,
        nextIconButtonProps,
        onPageChange,
        page,
        rowsPerPage,
        showFirstButton,
        showLastButton,
        slots = {},
        slotProps = {},
        ...other
      } = props;
      const isRtl = useRtl();
      const handleFirstPageButtonClick = (event) => {
        onPageChange(event, 0);
      };
      const handleBackButtonClick = (event) => {
        onPageChange(event, page - 1);
      };
      const handleNextButtonClick = (event) => {
        onPageChange(event, page + 1);
      };
      const handleLastPageButtonClick = (event) => {
        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
      };
      const FirstButton = slots.firstButton ?? IconButton_default;
      const LastButton = slots.lastButton ?? IconButton_default;
      const NextButton = slots.nextButton ?? IconButton_default;
      const PreviousButton = slots.previousButton ?? IconButton_default;
      const FirstButtonIcon = slots.firstButtonIcon ?? FirstPage_default;
      const LastButtonIcon = slots.lastButtonIcon ?? LastPage_default;
      const NextButtonIcon = slots.nextButtonIcon ?? KeyboardArrowRight_default;
      const PreviousButtonIcon = slots.previousButtonIcon ?? KeyboardArrowLeft_default;
      const FirstButtonSlot = isRtl ? LastButton : FirstButton;
      const PreviousButtonSlot = isRtl ? NextButton : PreviousButton;
      const NextButtonSlot = isRtl ? PreviousButton : NextButton;
      const LastButtonSlot = isRtl ? FirstButton : LastButton;
      const firstButtonSlotProps = isRtl ? slotProps.lastButton : slotProps.firstButton;
      const previousButtonSlotProps = isRtl ? slotProps.nextButton : slotProps.previousButton;
      const nextButtonSlotProps = isRtl ? slotProps.previousButton : slotProps.nextButton;
      const lastButtonSlotProps = isRtl ? slotProps.firstButton : slotProps.lastButton;
      return (0, import_jsx_runtime30.jsxs)("div", {
        ref,
        ...other,
        children: [showFirstButton && (0, import_jsx_runtime30.jsx)(FirstButtonSlot, {
          onClick: handleFirstPageButtonClick,
          disabled: disabled || page === 0,
          "aria-label": getItemAriaLabel("first", page),
          title: getItemAriaLabel("first", page),
          ...firstButtonSlotProps,
          children: isRtl ? (0, import_jsx_runtime30.jsx)(LastButtonIcon, {
            ...slotProps.lastButtonIcon
          }) : (0, import_jsx_runtime30.jsx)(FirstButtonIcon, {
            ...slotProps.firstButtonIcon
          })
        }), (0, import_jsx_runtime30.jsx)(PreviousButtonSlot, {
          onClick: handleBackButtonClick,
          disabled: disabled || page === 0,
          color: "inherit",
          "aria-label": getItemAriaLabel("previous", page),
          title: getItemAriaLabel("previous", page),
          ...previousButtonSlotProps ?? backIconButtonProps,
          children: isRtl ? (0, import_jsx_runtime30.jsx)(NextButtonIcon, {
            ...slotProps.nextButtonIcon
          }) : (0, import_jsx_runtime30.jsx)(PreviousButtonIcon, {
            ...slotProps.previousButtonIcon
          })
        }), (0, import_jsx_runtime30.jsx)(NextButtonSlot, {
          onClick: handleNextButtonClick,
          disabled: disabled || (count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false),
          color: "inherit",
          "aria-label": getItemAriaLabel("next", page),
          title: getItemAriaLabel("next", page),
          ...nextButtonSlotProps ?? nextIconButtonProps,
          children: isRtl ? (0, import_jsx_runtime30.jsx)(PreviousButtonIcon, {
            ...slotProps.previousButtonIcon
          }) : (0, import_jsx_runtime30.jsx)(NextButtonIcon, {
            ...slotProps.nextButtonIcon
          })
        }), showLastButton && (0, import_jsx_runtime30.jsx)(LastButtonSlot, {
          onClick: handleLastPageButtonClick,
          disabled: disabled || page >= Math.ceil(count / rowsPerPage) - 1,
          "aria-label": getItemAriaLabel("last", page),
          title: getItemAriaLabel("last", page),
          ...lastButtonSlotProps,
          children: isRtl ? (0, import_jsx_runtime30.jsx)(FirstButtonIcon, {
            ...slotProps.firstButtonIcon
          }) : (0, import_jsx_runtime30.jsx)(LastButtonIcon, {
            ...slotProps.lastButtonIcon
          })
        })]
      });
    });
    true ? TablePaginationActions.propTypes = {
      /**
       * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
       */
      backIconButtonProps: import_prop_types22.default.object,
      /**
       * The total number of rows.
       */
      count: import_prop_types22.default.number.isRequired,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: import_prop_types22.default.bool,
      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the current page.
       *
       * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
       *
       * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
       * @param {number} page The page number to format.
       * @returns {string}
       */
      getItemAriaLabel: import_prop_types22.default.func.isRequired,
      /**
       * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
       */
      nextIconButtonProps: import_prop_types22.default.object,
      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {number} page The page selected.
       */
      onPageChange: import_prop_types22.default.func.isRequired,
      /**
       * The zero-based index of the current page.
       */
      page: import_prop_types22.default.number.isRequired,
      /**
       * The number of rows per page.
       */
      rowsPerPage: import_prop_types22.default.number.isRequired,
      /**
       * If `true`, show the first-page button.
       */
      showFirstButton: import_prop_types22.default.bool.isRequired,
      /**
       * If `true`, show the last-page button.
       */
      showLastButton: import_prop_types22.default.bool.isRequired,
      /**
       * The props used for each slot inside the TablePaginationActions.
       * @default {}
       */
      slotProps: import_prop_types22.default.shape({
        firstButton: import_prop_types22.default.object,
        firstButtonIcon: import_prop_types22.default.object,
        lastButton: import_prop_types22.default.object,
        lastButtonIcon: import_prop_types22.default.object,
        nextButton: import_prop_types22.default.object,
        nextButtonIcon: import_prop_types22.default.object,
        previousButton: import_prop_types22.default.object,
        previousButtonIcon: import_prop_types22.default.object
      }),
      /**
       * The components used for each slot inside the TablePaginationActions.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: import_prop_types22.default.shape({
        firstButton: import_prop_types22.default.elementType,
        firstButtonIcon: import_prop_types22.default.elementType,
        lastButton: import_prop_types22.default.elementType,
        lastButtonIcon: import_prop_types22.default.elementType,
        nextButton: import_prop_types22.default.elementType,
        nextButtonIcon: import_prop_types22.default.elementType,
        previousButton: import_prop_types22.default.elementType,
        previousButtonIcon: import_prop_types22.default.elementType
      })
    } : void 0;
    TablePaginationActions_default = TablePaginationActions;
  }
});

// node_modules/@mui/material/TablePagination/TablePagination.js
function defaultLabelDisplayedRows({
  from,
  to,
  count
}) {
  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
}
function defaultGetAriaLabel(type) {
  return `Go to ${type} page`;
}
var React34, import_prop_types23, import_jsx_runtime31, import_react, _InputBase, TablePaginationRoot, TablePaginationToolbar, TablePaginationSpacer, TablePaginationSelectLabel, TablePaginationSelect, TablePaginationMenuItem, TablePaginationDisplayedRows, useUtilityClasses21, TablePagination, TablePagination_default;
var init_TablePagination = __esm({
  "node_modules/@mui/material/TablePagination/TablePagination.js"() {
    "use client";
    React34 = __toESM(require_react());
    import_prop_types23 = __toESM(require_prop_types());
    init_clsx();
    init_integerPropType();
    init_chainPropTypes();
    init_composeClasses();
    init_isHostComponent();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_InputBase();
    init_MenuItem2();
    init_Select();
    init_TableCell2();
    init_Toolbar2();
    init_TablePaginationActions();
    init_useId();
    init_tablePaginationClasses();
    import_jsx_runtime31 = __toESM(require_jsx_runtime());
    import_react = __toESM(require_react());
    TablePaginationRoot = styled_default(TableCell_default, {
      name: "MuiTablePagination",
      slot: "Root",
      overridesResolver: (props, styles) => styles.root
    })(memoTheme_default(({
      theme
    }) => ({
      overflow: "auto",
      color: (theme.vars || theme).palette.text.primary,
      fontSize: theme.typography.pxToRem(14),
      // Increase the specificity to override TableCell.
      "&:last-child": {
        padding: 0
      }
    })));
    TablePaginationToolbar = styled_default(Toolbar_default, {
      name: "MuiTablePagination",
      slot: "Toolbar",
      overridesResolver: (props, styles) => ({
        [`& .${tablePaginationClasses_default.actions}`]: styles.actions,
        ...styles.toolbar
      })
    })(memoTheme_default(({
      theme
    }) => ({
      minHeight: 52,
      paddingRight: 2,
      [`${theme.breakpoints.up("xs")} and (orientation: landscape)`]: {
        minHeight: 52
      },
      [theme.breakpoints.up("sm")]: {
        minHeight: 52,
        paddingRight: 2
      },
      [`& .${tablePaginationClasses_default.actions}`]: {
        flexShrink: 0,
        marginLeft: 20
      }
    })));
    TablePaginationSpacer = styled_default("div", {
      name: "MuiTablePagination",
      slot: "Spacer",
      overridesResolver: (props, styles) => styles.spacer
    })({
      flex: "1 1 100%"
    });
    TablePaginationSelectLabel = styled_default("p", {
      name: "MuiTablePagination",
      slot: "SelectLabel",
      overridesResolver: (props, styles) => styles.selectLabel
    })(memoTheme_default(({
      theme
    }) => ({
      ...theme.typography.body2,
      flexShrink: 0
    })));
    TablePaginationSelect = styled_default(Select_default, {
      name: "MuiTablePagination",
      slot: "Select",
      overridesResolver: (props, styles) => ({
        [`& .${tablePaginationClasses_default.selectIcon}`]: styles.selectIcon,
        [`& .${tablePaginationClasses_default.select}`]: styles.select,
        ...styles.input,
        ...styles.selectRoot
      })
    })({
      color: "inherit",
      fontSize: "inherit",
      flexShrink: 0,
      marginRight: 32,
      marginLeft: 8,
      [`& .${tablePaginationClasses_default.select}`]: {
        paddingLeft: 8,
        paddingRight: 24,
        textAlign: "right",
        textAlignLast: "right"
        // Align <select> on Chrome.
      }
    });
    TablePaginationMenuItem = styled_default(MenuItem_default, {
      name: "MuiTablePagination",
      slot: "MenuItem",
      overridesResolver: (props, styles) => styles.menuItem
    })({});
    TablePaginationDisplayedRows = styled_default("p", {
      name: "MuiTablePagination",
      slot: "DisplayedRows",
      overridesResolver: (props, styles) => styles.displayedRows
    })(memoTheme_default(({
      theme
    }) => ({
      ...theme.typography.body2,
      flexShrink: 0
    })));
    useUtilityClasses21 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        toolbar: ["toolbar"],
        spacer: ["spacer"],
        selectLabel: ["selectLabel"],
        select: ["select"],
        input: ["input"],
        selectIcon: ["selectIcon"],
        menuItem: ["menuItem"],
        displayedRows: ["displayedRows"],
        actions: ["actions"]
      };
      return composeClasses(slots, getTablePaginationUtilityClass, classes);
    };
    TablePagination = React34.forwardRef(function TablePagination2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTablePagination"
      });
      const {
        ActionsComponent = TablePaginationActions_default,
        backIconButtonProps,
        className,
        colSpan: colSpanProp,
        component = TableCell_default,
        count,
        disabled = false,
        getItemAriaLabel = defaultGetAriaLabel,
        labelDisplayedRows = defaultLabelDisplayedRows,
        labelRowsPerPage = "Rows per page:",
        nextIconButtonProps,
        onPageChange,
        onRowsPerPageChange,
        page,
        rowsPerPage,
        rowsPerPageOptions = [10, 25, 50, 100],
        SelectProps = {},
        showFirstButton = false,
        showLastButton = false,
        slotProps = {},
        slots = {},
        ...other
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses21(ownerState);
      const selectProps = (slotProps == null ? void 0 : slotProps.select) ?? SelectProps;
      const MenuItemComponent = selectProps.native ? "option" : TablePaginationMenuItem;
      let colSpan;
      if (component === TableCell_default || component === "td") {
        colSpan = colSpanProp || 1e3;
      }
      const selectId = useId_default(selectProps.id);
      const labelId = useId_default(selectProps.labelId);
      const getLabelDisplayedRowsTo = () => {
        if (count === -1) {
          return (page + 1) * rowsPerPage;
        }
        return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
      };
      return (0, import_jsx_runtime31.jsx)(TablePaginationRoot, {
        colSpan,
        ref,
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ...other,
        children: (0, import_jsx_runtime31.jsxs)(TablePaginationToolbar, {
          className: classes.toolbar,
          children: [(0, import_jsx_runtime31.jsx)(TablePaginationSpacer, {
            className: classes.spacer
          }), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime31.jsx)(TablePaginationSelectLabel, {
            className: classes.selectLabel,
            id: labelId,
            children: labelRowsPerPage
          }), rowsPerPageOptions.length > 1 && (0, import_jsx_runtime31.jsx)(TablePaginationSelect, {
            variant: "standard",
            ...!selectProps.variant && {
              input: _InputBase || (_InputBase = (0, import_jsx_runtime31.jsx)(InputBase_default, {}))
            },
            value: rowsPerPage,
            onChange: onRowsPerPageChange,
            id: selectId,
            labelId,
            ...selectProps,
            classes: {
              ...selectProps.classes,
              // TODO v5 remove `classes.input`
              root: clsx_default(classes.input, classes.selectRoot, (selectProps.classes || {}).root),
              select: clsx_default(classes.select, (selectProps.classes || {}).select),
              // TODO v5 remove `selectIcon`
              icon: clsx_default(classes.selectIcon, (selectProps.classes || {}).icon)
            },
            disabled,
            children: rowsPerPageOptions.map((rowsPerPageOption) => (0, import_react.createElement)(MenuItemComponent, {
              ...!isHostComponent_default(MenuItemComponent) && {
                ownerState
              },
              className: classes.menuItem,
              key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
              value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
            }, rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
          }), (0, import_jsx_runtime31.jsx)(TablePaginationDisplayedRows, {
            className: classes.displayedRows,
            children: labelDisplayedRows({
              from: count === 0 ? 0 : page * rowsPerPage + 1,
              to: getLabelDisplayedRowsTo(),
              count: count === -1 ? -1 : count,
              page
            })
          }), (0, import_jsx_runtime31.jsx)(ActionsComponent, {
            className: classes.actions,
            backIconButtonProps,
            count,
            nextIconButtonProps,
            onPageChange,
            page,
            rowsPerPage,
            showFirstButton,
            showLastButton,
            slotProps: slotProps.actions,
            slots: slots.actions,
            getItemAriaLabel,
            disabled
          })]
        })
      });
    });
    true ? TablePagination.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The component used for displaying the actions.
       * Either a string to use a HTML element or a component.
       * @default TablePaginationActions
       */
      ActionsComponent: import_prop_types23.default.elementType,
      /**
       * Props applied to the back arrow [`IconButton`](https://mui.com/material-ui/api/icon-button/) component.
       *
       * This prop is an alias for `slotProps.actions.previousButton` and will be overriden by it if both are used.
       * @deprecated Use `slotProps.actions.previousButton` instead.
       */
      backIconButtonProps: import_prop_types23.default.object,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types23.default.object,
      /**
       * @ignore
       */
      className: import_prop_types23.default.string,
      /**
       * @ignore
       */
      colSpan: import_prop_types23.default.number,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types23.default.elementType,
      /**
       * The total number of rows.
       *
       * To enable server side pagination for an unknown number of items, provide -1.
       */
      count: integerPropType_default.isRequired,
      /**
       * If `true`, the component is disabled.
       * @default false
       */
      disabled: import_prop_types23.default.bool,
      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the current page.
       * This is important for screen reader users.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
       * @returns {string}
       * @default function defaultGetAriaLabel(type) {
       *   return `Go to ${type} page`;
       * }
       */
      getItemAriaLabel: import_prop_types23.default.func,
      /**
       * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
       * object.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @default function defaultLabelDisplayedRows({ from, to, count }) {
       *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
       * }
       */
      labelDisplayedRows: import_prop_types23.default.func,
      /**
       * Customize the rows per page label.
       *
       * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
       * @default 'Rows per page:'
       */
      labelRowsPerPage: import_prop_types23.default.node,
      /**
       * Props applied to the next arrow [`IconButton`](https://mui.com/material-ui/api/icon-button/) element.
       *
       * This prop is an alias for `slotProps.actions.nextButton` and will be overriden by it if both are used.
       * @deprecated Use `slotProps.actions.nextButton` instead.
       */
      nextIconButtonProps: import_prop_types23.default.object,
      /**
       * Callback fired when the page is changed.
       *
       * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
       * @param {number} page The page selected.
       */
      onPageChange: import_prop_types23.default.func.isRequired,
      /**
       * Callback fired when the number of rows per page is changed.
       *
       * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
       */
      onRowsPerPageChange: import_prop_types23.default.func,
      /**
       * The zero-based index of the current page.
       */
      page: chainPropTypes(integerPropType_default.isRequired, (props) => {
        const {
          count,
          page,
          rowsPerPage
        } = props;
        if (count === -1) {
          return null;
        }
        const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
        if (page < 0 || page > newLastPage) {
          return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
        }
        return null;
      }),
      /**
       * The number of rows per page.
       *
       * Set -1 to display all the rows.
       */
      rowsPerPage: integerPropType_default.isRequired,
      /**
       * Customizes the options of the rows per page select field. If less than two options are
       * available, no select field will be displayed.
       * Use -1 for the value with a custom label to show all the rows.
       * @default [10, 25, 50, 100]
       */
      rowsPerPageOptions: import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.number, import_prop_types23.default.shape({
        label: import_prop_types23.default.string.isRequired,
        value: import_prop_types23.default.number.isRequired
      })]).isRequired),
      /**
       * Props applied to the rows per page [`Select`](https://mui.com/material-ui/api/select/) element.
       *
       * This prop is an alias for `slotProps.select` and will be overriden by it if both are used.
       * @deprecated Use `slotProps.select` instead.
       *
       * @default {}
       */
      SelectProps: import_prop_types23.default.object,
      /**
       * If `true`, show the first-page button.
       * @default false
       */
      showFirstButton: import_prop_types23.default.bool,
      /**
       * If `true`, show the last-page button.
       * @default false
       */
      showLastButton: import_prop_types23.default.bool,
      /**
       * The props used for each slot inside the TablePagination.
       * @default {}
       */
      slotProps: import_prop_types23.default.shape({
        actions: import_prop_types23.default.shape({
          firstButton: import_prop_types23.default.object,
          firstButtonIcon: import_prop_types23.default.object,
          lastButton: import_prop_types23.default.object,
          lastButtonIcon: import_prop_types23.default.object,
          nextButton: import_prop_types23.default.object,
          nextButtonIcon: import_prop_types23.default.object,
          previousButton: import_prop_types23.default.object,
          previousButtonIcon: import_prop_types23.default.object
        }),
        select: import_prop_types23.default.object
      }),
      /**
       * The components used for each slot inside the TablePagination.
       * Either a string to use a HTML element or a component.
       * @default {}
       */
      slots: import_prop_types23.default.shape({
        actions: import_prop_types23.default.shape({
          firstButton: import_prop_types23.default.elementType,
          firstButtonIcon: import_prop_types23.default.elementType,
          lastButton: import_prop_types23.default.elementType,
          lastButtonIcon: import_prop_types23.default.elementType,
          nextButton: import_prop_types23.default.elementType,
          nextButtonIcon: import_prop_types23.default.elementType,
          previousButton: import_prop_types23.default.elementType,
          previousButtonIcon: import_prop_types23.default.elementType
        })
      }),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object])
    } : void 0;
    TablePagination_default = TablePagination;
  }
});

// node_modules/@mui/material/TablePagination/index.js
var TablePagination_exports = {};
__export(TablePagination_exports, {
  default: () => TablePagination_default,
  getTablePaginationUtilityClass: () => getTablePaginationUtilityClass,
  tablePaginationClasses: () => tablePaginationClasses_default
});
var init_TablePagination2 = __esm({
  "node_modules/@mui/material/TablePagination/index.js"() {
    init_TablePagination();
    init_tablePaginationClasses();
    init_tablePaginationClasses();
  }
});

// node_modules/@mui/material/TableRow/tableRowClasses.js
function getTableRowUtilityClass(slot) {
  return generateUtilityClass("MuiTableRow", slot);
}
var tableRowClasses, tableRowClasses_default;
var init_tableRowClasses = __esm({
  "node_modules/@mui/material/TableRow/tableRowClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tableRowClasses = generateUtilityClasses("MuiTableRow", ["root", "selected", "hover", "head", "footer"]);
    tableRowClasses_default = tableRowClasses;
  }
});

// node_modules/@mui/material/TableRow/TableRow.js
var React35, import_prop_types24, import_jsx_runtime32, useUtilityClasses22, TableRowRoot, defaultComponent5, TableRow, TableRow_default;
var init_TableRow = __esm({
  "node_modules/@mui/material/TableRow/TableRow.js"() {
    "use client";
    React35 = __toESM(require_react());
    import_prop_types24 = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_colorManipulator();
    init_Tablelvl2Context();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_tableRowClasses();
    import_jsx_runtime32 = __toESM(require_jsx_runtime());
    useUtilityClasses22 = (ownerState) => {
      const {
        classes,
        selected,
        hover,
        head,
        footer
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected", hover && "hover", head && "head", footer && "footer"]
      };
      return composeClasses(slots, getTableRowUtilityClass, classes);
    };
    TableRowRoot = styled_default("tr", {
      name: "MuiTableRow",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.head && styles.head, ownerState.footer && styles.footer];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      color: "inherit",
      display: "table-row",
      verticalAlign: "middle",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      [`&.${tableRowClasses_default.hover}:hover`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`&.${tableRowClasses_default.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        "&:hover": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
        }
      }
    })));
    defaultComponent5 = "tr";
    TableRow = React35.forwardRef(function TableRow2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTableRow"
      });
      const {
        className,
        component = defaultComponent5,
        hover = false,
        selected = false,
        ...other
      } = props;
      const tablelvl24 = React35.useContext(Tablelvl2Context_default);
      const ownerState = {
        ...props,
        component,
        hover,
        selected,
        head: tablelvl24 && tablelvl24.variant === "head",
        footer: tablelvl24 && tablelvl24.variant === "footer"
      };
      const classes = useUtilityClasses22(ownerState);
      return (0, import_jsx_runtime32.jsx)(TableRowRoot, {
        as: component,
        ref,
        className: clsx_default(classes.root, className),
        role: component === defaultComponent5 ? null : "row",
        ownerState,
        ...other
      });
    });
    true ? TableRow.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Should be valid `<tr>` children such as `TableCell`.
       */
      children: import_prop_types24.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types24.default.object,
      /**
       * @ignore
       */
      className: import_prop_types24.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types24.default.elementType,
      /**
       * If `true`, the table row will shade on hover.
       * @default false
       */
      hover: import_prop_types24.default.bool,
      /**
       * If `true`, the table row will have the selected shading.
       * @default false
       */
      selected: import_prop_types24.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object])
    } : void 0;
    TableRow_default = TableRow;
  }
});

// node_modules/@mui/material/TableRow/index.js
var TableRow_exports = {};
__export(TableRow_exports, {
  default: () => TableRow_default,
  getTableRowUtilityClass: () => getTableRowUtilityClass,
  tableRowClasses: () => tableRowClasses_default
});
var init_TableRow2 = __esm({
  "node_modules/@mui/material/TableRow/index.js"() {
    init_TableRow();
    init_tableRowClasses();
    init_tableRowClasses();
  }
});

// node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js
function getTableSortLabelUtilityClass(slot) {
  return generateUtilityClass("MuiTableSortLabel", slot);
}
var tableSortLabelClasses, tableSortLabelClasses_default;
var init_tableSortLabelClasses = __esm({
  "node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    tableSortLabelClasses = generateUtilityClasses("MuiTableSortLabel", ["root", "active", "icon", "iconDirectionDesc", "iconDirectionAsc", "directionDesc", "directionAsc"]);
    tableSortLabelClasses_default = tableSortLabelClasses;
  }
});

// node_modules/@mui/material/internal/svg-icons/ArrowDownward.js
var React36, import_jsx_runtime33, ArrowDownward_default;
var init_ArrowDownward = __esm({
  "node_modules/@mui/material/internal/svg-icons/ArrowDownward.js"() {
    "use client";
    React36 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime33 = __toESM(require_jsx_runtime());
    ArrowDownward_default = createSvgIcon((0, import_jsx_runtime33.jsx)("path", {
      d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
    }), "ArrowDownward");
  }
});

// node_modules/@mui/material/TableSortLabel/TableSortLabel.js
var import_prop_types25, React37, import_jsx_runtime34, useUtilityClasses23, TableSortLabelRoot, TableSortLabelIcon, TableSortLabel, TableSortLabel_default;
var init_TableSortLabel = __esm({
  "node_modules/@mui/material/TableSortLabel/TableSortLabel.js"() {
    "use client";
    init_composeClasses();
    init_clsx();
    import_prop_types25 = __toESM(require_prop_types());
    React37 = __toESM(require_react());
    init_ButtonBase();
    init_ArrowDownward();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_capitalize();
    init_tableSortLabelClasses();
    import_jsx_runtime34 = __toESM(require_jsx_runtime());
    useUtilityClasses23 = (ownerState) => {
      const {
        classes,
        direction,
        active
      } = ownerState;
      const slots = {
        root: ["root", active && "active", `direction${capitalize_default(direction)}`],
        icon: ["icon", `iconDirection${capitalize_default(direction)}`]
      };
      return composeClasses(slots, getTableSortLabelUtilityClass, classes);
    };
    TableSortLabelRoot = styled_default(ButtonBase_default, {
      name: "MuiTableSortLabel",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.active && styles.active];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      cursor: "pointer",
      display: "inline-flex",
      justifyContent: "flex-start",
      flexDirection: "inherit",
      alignItems: "center",
      "&:focus": {
        color: (theme.vars || theme).palette.text.secondary
      },
      "&:hover": {
        color: (theme.vars || theme).palette.text.secondary,
        [`& .${tableSortLabelClasses_default.icon}`]: {
          opacity: 0.5
        }
      },
      [`&.${tableSortLabelClasses_default.active}`]: {
        color: (theme.vars || theme).palette.text.primary,
        [`& .${tableSortLabelClasses_default.icon}`]: {
          opacity: 1,
          color: (theme.vars || theme).palette.text.secondary
        }
      }
    })));
    TableSortLabelIcon = styled_default("span", {
      name: "MuiTableSortLabel",
      slot: "Icon",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.icon, styles[`iconDirection${capitalize_default(ownerState.direction)}`]];
      }
    })(memoTheme_default(({
      theme
    }) => ({
      fontSize: 18,
      marginRight: 4,
      marginLeft: 4,
      opacity: 0,
      transition: theme.transitions.create(["opacity", "transform"], {
        duration: theme.transitions.duration.shorter
      }),
      userSelect: "none",
      variants: [{
        props: {
          direction: "desc"
        },
        style: {
          transform: "rotate(0deg)"
        }
      }, {
        props: {
          direction: "asc"
        },
        style: {
          transform: "rotate(180deg)"
        }
      }]
    })));
    TableSortLabel = React37.forwardRef(function TableSortLabel2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiTableSortLabel"
      });
      const {
        active = false,
        children,
        className,
        direction = "asc",
        hideSortIcon = false,
        IconComponent = ArrowDownward_default,
        ...other
      } = props;
      const ownerState = {
        ...props,
        active,
        direction,
        hideSortIcon,
        IconComponent
      };
      const classes = useUtilityClasses23(ownerState);
      return (0, import_jsx_runtime34.jsxs)(TableSortLabelRoot, {
        className: clsx_default(classes.root, className),
        component: "span",
        disableRipple: true,
        ownerState,
        ref,
        ...other,
        children: [children, hideSortIcon && !active ? null : (0, import_jsx_runtime34.jsx)(TableSortLabelIcon, {
          as: IconComponent,
          className: clsx_default(classes.icon),
          ownerState
        })]
      });
    });
    true ? TableSortLabel.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the label will have the active styling (should be true for the sorted column).
       * @default false
       */
      active: import_prop_types25.default.bool,
      /**
       * Label contents, the arrow will be appended automatically.
       */
      children: import_prop_types25.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types25.default.object,
      /**
       * @ignore
       */
      className: import_prop_types25.default.string,
      /**
       * The current sort direction.
       * @default 'asc'
       */
      direction: import_prop_types25.default.oneOf(["asc", "desc"]),
      /**
       * Hide sort icon when active is false.
       * @default false
       */
      hideSortIcon: import_prop_types25.default.bool,
      /**
       * Sort icon to use.
       * @default ArrowDownwardIcon
       */
      IconComponent: import_prop_types25.default.elementType,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
    } : void 0;
    TableSortLabel_default = TableSortLabel;
  }
});

// node_modules/@mui/material/TableSortLabel/index.js
var TableSortLabel_exports = {};
__export(TableSortLabel_exports, {
  default: () => TableSortLabel_default,
  getTableSortLabelUtilityClass: () => getTableSortLabelUtilityClass,
  tableSortLabelClasses: () => tableSortLabelClasses_default
});
var init_TableSortLabel2 = __esm({
  "node_modules/@mui/material/TableSortLabel/index.js"() {
    init_TableSortLabel();
    init_tableSortLabelClasses();
    init_tableSortLabelClasses();
  }
});

export {
  getIconButtonUtilityClass,
  iconButtonClasses_default,
  IconButton_default,
  IconButton_exports,
  init_IconButton2 as init_IconButton,
  getTypographyUtilityClass,
  typographyClasses_default,
  Typography_default,
  Typography_exports,
  init_Typography2 as init_Typography,
  getPopperUtilityClass,
  Popper_default,
  init_Popper2 as init_Popper,
  getChipUtilityClass,
  chipClasses_default,
  Chip_default,
  Chip_exports,
  init_Chip2 as init_Chip,
  SwitchBase_default,
  init_SwitchBase,
  getCheckboxUtilityClass,
  checkboxClasses_default,
  Checkbox_default,
  Checkbox_exports,
  init_Checkbox2 as init_Checkbox,
  getDividerUtilityClass,
  dividerClasses_default,
  Divider_default,
  init_Divider2 as init_Divider,
  getFormControlLabelUtilityClasses,
  formControlLabelClasses_default,
  FormControlLabel_default,
  FormControlLabel_exports,
  init_FormControlLabel2 as init_FormControlLabel,
  getFormGroupUtilityClass,
  formGroupClasses_default,
  FormGroup_default,
  FormGroup_exports,
  init_FormGroup2 as init_FormGroup,
  Grid_default,
  Grid_exports,
  init_Grid2 as init_Grid,
  getListItemIconUtilityClass,
  listItemIconClasses_default,
  ListItemIcon_default,
  init_ListItemIcon2 as init_ListItemIcon,
  getListItemTextUtilityClass,
  listItemTextClasses_default,
  ListItemText_default,
  ListItemText_exports,
  init_ListItemText2 as init_ListItemText,
  getMenuItemUtilityClass,
  menuItemClasses_default,
  MenuItem_default,
  MenuItem_exports,
  init_MenuItem2 as init_MenuItem,
  FirstPage_default,
  init_FirstPage,
  LastPage_default,
  init_LastPage,
  getTooltipUtilityClass,
  tooltipClasses_default,
  Tooltip_default,
  Tooltip_exports,
  init_Tooltip2 as init_Tooltip,
  getTableUtilityClass,
  tableClasses_default,
  Table_default,
  Table_exports,
  init_Table2 as init_Table,
  getTableBodyUtilityClass,
  tableBodyClasses_default,
  TableBody_default,
  TableBody_exports,
  init_TableBody2 as init_TableBody,
  getTableCellUtilityClass,
  tableCellClasses_default,
  TableCell_default,
  TableCell_exports,
  init_TableCell2 as init_TableCell,
  getTableFooterUtilityClass,
  tableFooterClasses_default,
  TableFooter_default,
  TableFooter_exports,
  init_TableFooter2 as init_TableFooter,
  getTableHeadUtilityClass,
  tableHeadClasses_default,
  TableHead_default,
  TableHead_exports,
  init_TableHead2 as init_TableHead,
  getToolbarUtilityClass,
  toolbarClasses_default,
  Toolbar_default,
  Toolbar_exports,
  init_Toolbar2 as init_Toolbar,
  KeyboardArrowLeft_default,
  init_KeyboardArrowLeft,
  KeyboardArrowRight_default,
  init_KeyboardArrowRight,
  getTablePaginationUtilityClass,
  tablePaginationClasses_default,
  TablePagination_default,
  TablePagination_exports,
  init_TablePagination2 as init_TablePagination,
  getTableRowUtilityClass,
  tableRowClasses_default,
  TableRow_default,
  TableRow_exports,
  init_TableRow2 as init_TableRow,
  getTableSortLabelUtilityClass,
  tableSortLabelClasses_default,
  TableSortLabel_default,
  TableSortLabel_exports,
  init_TableSortLabel2 as init_TableSortLabel
};
//# sourceMappingURL=chunk-YN7PMPDU.js.map
